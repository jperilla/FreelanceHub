<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Griffin.MvcContrib</name>
    </assembly>
    <members>
        <member name="T:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy">
            <summary>
            Used to handle passwords.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy.Encrypt(Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo)">
            <summary>
            Encrypt a password
            </summary>
            <param name="account">Account information used to encrypt password</param>
            <returns>encrypted password.</returns>
            <remarks>You can set the salt property which exist in the account information. 
            Encryption can be one way (hashing) or regular encryption</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy.Decrypt(System.String)">
            <summary>
            Decrypt a password
            </summary>
            <param name="password">Encrpted password</param>
            <returns>Decrypted password if decryption is possible; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy.GeneratePassword(Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Generate a new password
            </summary>
            <param name="policy">Policy that should be used when generating a new password.</param>
            <returns>A password which is not encrypted.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy.Compare(Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo,System.String)">
            <summary>
            Compare if the specified password matches the encrypted password
            </summary>
            <param name="account">Stored acount informagtion.</param>
            <param name="clearTextPassword">Password specified by user.</param>
            <returns>true if passwords match; otherwise null</returns>
            <remarks>
            Method exists to make it possible to compare the password that the user have written
            with the one that have been stored in a database.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy.IsValid(System.String,Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Checks if the specified password is valid
            </summary>
            <param name="password">Password being checked</param>
            <param name="passwordPolicy">Policy used to validate password.</param>
            <returns></returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy.IsPasswordsDecryptable">
            <summary>
            Gets if passwords can be decrypted.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy.PasswordFormat">
            <summary>
            Gets how passwords are stored in the database.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.IAccountRepository">
            <summary>
            Repository for user accounts
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.Register(Griffin.MvcContrib.Providers.Membership.IMembershipAccount)">
            <summary>
            Register a new account.
            </summary>
            <param name="account">Acount to register</param>
            <returns>Result indication</returns>
            <remarks>
            Implementations should set the <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.ProviderUserKey"/> property before returning.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.Get(System.String)">
            <summary>
            Fetch a user from the service.
            </summary>
            <param name="username">Unique user name</param>
            <returns>User if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.Update(Griffin.MvcContrib.Providers.Membership.IMembershipAccount)">
            <summary>
            Update an existing user.
            </summary>
            <param name="account">Account being updated.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.GetByProviderKey(System.Object)">
            <summary>
            Get a user by using your PK.
            </summary>
            <param name="id">PK in your own db</param>
            <returns>User if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.GetUserNameByEmail(System.String)">
            <summary>
            Translate an email into a user name.
            </summary>
            <param name="email">Email to lookup</param>
            <returns>User name if the specified email was found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.Delete(System.String,System.Boolean)">
            <summary>
            Delete a user from the database.
            </summary>
            <param name="username">Unique user name</param>
            <param name="deleteAllRelatedData">Delete information from all other tables etc</param>
            <returns>true if was removed successfully; otherwise false.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.GetNumberOfUsersOnline">
            <summary>
            Get number of users that are online
            </summary>
            <returns>Number of online users</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.FindAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all users
            </summary>
            <param name="pageIndex">zero based index</param>
            <param name="pageSize">Number of users per page</param>
            <param name="totalRecords">Total number of users</param>
            <returns>A collection of users or an empty collection if no users was found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.FindNewAccounts(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find new acounts that haven't been activated.
            </summary>
            <param name="pageIndex">zero based index</param>
            <param name="pageSize">Number of users per page</param>
            <param name="totalRecords">Total number of users</param>
            <returns>A collection of users or an empty collection if no users was found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.FindByUserName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find by searching for user name
            </summary>
            <param name="usernameToMatch">User name (or partial user name)</param>
            <param name="pageIndex">Zero based index</param>
            <param name="pageSize">Number of items per page</param>
            <param name="totalRecords">total number of records that partially matched the specified user name</param>
            <returns>A collection of users or an empty collection if no users was found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.FindByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find by searching for the specified email
            </summary>
            <param name="emailToMatch">Number of users that have the specified email (no partial matches)</param>
            <param name="pageIndex">Zero based index</param>
            <param name="pageSize">Number of items per page</param>
            <param name="totalRecords">total number of records that matched the specified email</param>
            <returns>A collection of users or an empty collection if no users was found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.IAccountRepository.Create(System.Object,System.String,System.String,System.String)">
            <summary>
            Create a new membership account
            </summary>
            <param name="providerUserKey">Primary key in the data source</param>
            <param name="applicationName">Name of the application that the account is created for</param>
            <param name="username">User name</param>
            <param name="email">Email address</param>
            <returns>Created account</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IAccountRepository.IsUniqueEmailRequired">
            <summary>
            Gets whether all users must have unique email addresses.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository">
            <summary>
            Repository used to handle localized strings
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository.GetAllPrompts(System.Globalization.CultureInfo,System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.SearchFilter)">
            <summary>
            Get all prompts that have been created for an language
            </summary>
            <param name="culture">Culture to get translation for</param>
            <param name="templateCulture">Culture to find not translated prompts in (or same culture to disable) </param>
            <param name="filter">Used to limit the search result</param>
            <returns>A collection of prompts</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository.CreateLanguage(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Create translation for a new language
            </summary>
            <param name="culture">Language to create</param>
            <param name="templateCulture">Language to use as a template</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository.GetAvailableLanguages">
            <summary>
            Get all languages that have translations
            </summary>
            <returns>Collection of languages</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository.GetPrompt(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            Get a text using it's name.
            </summary>
            <param name="culture">Culture to get prompt for</param>
            <param name="key"> </param>
            <returns>Prompt if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository.Save(System.Globalization.CultureInfo,System.String,System.String,System.String)">
            <summary>
            Save/Update a text prompt
            </summary>
            <param name="culture">Language to save prompt in</param>
            <param name="viewPath">Path to view. You can use <see cref="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.GetViewPath(System.String,System.Web.Routing.RouteData)"/></param>
            <param name="textName">Text to translate</param>
            <param name="translatedText">Translated text</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository.Exists(System.Globalization.CultureInfo)">
            <summary>
            checks if the specified language exists.
            </summary>
            <param name="cultureInfo">Language to find</param>
            <returns>true if found; otherwise false.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository.CreatePrompt(System.Globalization.CultureInfo,System.String,System.String,System.String)">
            <summary>
            Create a new prompt in the specified language
            </summary>
            <param name="culture">Language that the translation is for</param>
            <param name="viewPath">Path to view. You can use <see cref="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.GetViewPath(System.String,System.Web.Routing.RouteData)"/></param>
            <param name="textName">Text to translate</param>
            <param name="translatedText">Translated text</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository.Delete(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            Delete a prompt
            </summary>
            <param name="cultureInfo">Culture to delete the prompt for</param>
            <param name="key">Prompt key</param>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.NamespaceDoc">
            <summary>
            The virtual path provider can be used as an alternative to the one which comes with the .NET framework.
            </summary>
            <remarks>
            <para>
            The virtual path provider is named <see cref="T:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider"/>. Look at it's documentation for further information.
            </para>
            <para>
            To be able to serve static files you have to tell IIS that it should pass those to the virtual path provider. It's done in web.config
            like this:
            <example>
             <system.webServer>
                <modules runAllManagedModulesForAllRequests="true"/>
                <handlers>
                  <add name="AspNetStaticFileHandler-GIF" path="*.gif" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
                  <add name="AspNetStaticFileHandler-PNG" path="*.png" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
                  <add name="AspNetStaticFileHandler-JPG" path="*.jpg" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
                  <add name="AspNetStaticFileHandler-CSS" path="*.css" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
                  <add name="AspNetStaticFileHandler-JS" path="*.js" verb="GET,HEAD" type="System.Web.StaticFileHandler"/>
                </handlers>
              </system.webServer>
            </example>
            You also probably do not want the static files to go through the MVC routing, so add the following ignore in global.asax:
            <example>
            <code>
            routes.IgnoreRoute("{*staticfile}", new { staticfile = @".*\.(css|js|gif|jpg|png)(/.*)?" });
            </code>
            </example>
            </para>
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Json.IJsonResponseContent">
            <summary>
            A response sent back to the client
            </summary>
            <remarks>
            <para>
            It can be hard to handle JSON responses for actions which does something other than simple
            gets. For instance a create method might want to return a user if everything went OK or 
            an error message if something failed.
            </para>
            <para>By encapsulating all responses in a predefined structure we know what kind of
            response we get for each request and can therefore handle it accordingly.</para>
            </remarks>
            <seealso cref="T:Griffin.MvcContrib.Json.JsonResponse"/>
        </member>
        <member name="T:Griffin.MvcContrib.Json.ControllerExtensions">
            <summary>
            Extension methods for working with structured JSON
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ControllerExtensions.JsonResponse(System.Web.Mvc.Controller,System.Boolean,Griffin.MvcContrib.Json.IJsonResponseContent)">
            <summary>
            Return a structured JSON response.
            </summary>
            <param name="controller">Controller returning the result</param>
            <param name="success">Request was successful (false probably means that you want to return <see cref="T:Griffin.MvcContrib.Json.ErrorMessage"/> or <see cref="T:System.Web.Mvc.ModelError"/>)</param>
            <param name="content">Content to return</param>
            <returns>Structured json</returns>
        </member>
        <member name="T:Griffin.MvcContrib.SelectHelper">
            <summary>
            Helper methods for select lists.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.SelectHelper.From``1(System.Collections.IEnumerable)">
            <summary>
            Generates a select list
            </summary>
            <typeparam name="TTemplate">Template used to fetch label/value.</typeparam>
            <param name="items">The items.</param>
            <returns>Generated select list items</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidationMessages.MvcDataSource">
            <summary>
            Provides messages for all attributes in ASP.NET MVC
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidationMessages.IValidationMessageDataSource">
            <summary>
            Provides validation messages for attributes from a specific data source.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.IValidationMessageDataSource.GetMessage(Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext)">
            <summary>
            Get a validation message
            </summary>
            <param name="context"></param>
            <returns>String if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.MvcDataSource.GetMessage(Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext)">
            <summary>
            Get a validation message
            </summary>
            <param name="context">Context</param>
            <returns>
            String if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="T:Griffin.MvcContrib.Json.ModelStateJson">
            <summary>
              Create a json structure from model state
            </summary>
            <remarks>
              <example>
                Will return the following structure: 
            <code>
            [
                { "propertyName": ["Field is required", "Must be max 10 chars"]} 
            ]</code>
              </example>
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ModelStateJson.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState}})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError"/> class.
            </summary>
            <param name="modelState"> Model state. </param>
            <example>
              <code>
                [HttpPost]
                public ActionResult Create(YourModel model) 
                {
                    if (!ModelState.IsValid)
                    {
                        if (Request.IsAjax())
                        {
                            return Json(new JsonResponse(new ModelError(ModelState)));
                        }
                    }
                }</code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ModelStateJson.GetEnumerator">
            <summary>
              Gets the enumerator.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ModelStateJson.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ModelStateJson.Add(System.String,System.String)">
            <summary>
              Add a new error message
            </summary>
            <param name="propertyName"> Name of the view model property. </param>
            <param name="errorMessage"> The error message. </param>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Roles.IRoleRepository">
            <summary>
            Repository used to find users and their roles.
            </summary>
            <remarks>The application name parameter can safely be ignored if you
            only have users/roles for one application in your database table. For more information
            read about the role provider in MSDN.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.GetUser(System.String,System.String)">
            <summary>
            Get a user
            </summary>
            <param name="applicationName">Application that the request is for.</param>
            <param name="username">Account user name</param>
            <returns>User if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.CreateRole(System.String,System.String)">
            <summary>
            Create a new role
            </summary>
            <param name="applicationName">Application that the request is for.</param>
            <param name="roleName">Name of role</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.RemoveRole(System.String,System.String)">
            <summary>
            Remove a role
            </summary>
            <param name="applicationName">Application that the request is for.</param>
            <param name="roleName">Role to remove</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.AddUserToRole(System.String,System.String,System.String)">
            <summary>
            Add a user to an existing role
            </summary>
            <param name="applicationName">Application that the request is for.</param>
            <param name="roleName">Role that the user is going to be added to</param>
            <param name="username">User name</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.RemoveUserFromRole(System.String,System.String,System.String)">
            <summary>
            Remove an user from a role.
            </summary>
            <param name="applicationName">Application that the request is for.</param>
            <param name="roleName">Role that the user is going to be removed from.</param>
            <param name="username">User to remove</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.GetRoleNames(System.String)">
            <summary>
            Gets the role names.
            </summary>
            <param name="applicationName">Name of the application.</param>
            <returns>A list with role names</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.Exists(System.String,System.String)">
            <summary>
            Checks if a role exists in the specified application
            </summary>
            <param name="applicationName">Name of the application.</param>
            <param name="roleName">Name of the role.</param>
            <returns>true if found; otherwise false.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.GetNumberOfUsersInRole(System.String,System.String)">
            <summary>
            Get number of users in a role
            </summary>
            <param name="applicationName">Application to check for</param>
            <param name="roleName">Name of role</param>
            <returns>Number of users</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.FindUsersInRole(System.String,System.String,System.String)">
            <summary>
            Finds the users in a role.
            </summary>
            <param name="applicationName">Application to look in</param>
            <param name="roleName">Name of the role.</param>
            <param name="userNameToMatch">The user name to match.</param>
            <returns>A list of user names.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IRoleRepository.GetUsersInRole(System.String,System.String)">
            <summary>
            Finds the users in a role.
            </summary>
            <param name="applicationName">Application to look in</param>
            <param name="roleName">Name of the role.</param>
            <returns>A list of user names.</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.PasswordPolicyExtensions">
            <summary>
            Extension methods for password policies.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.PasswordPolicyExtensions.IsPasswordValid(Griffin.MvcContrib.Providers.Membership.IPasswordPolicy,System.String)">
            <summary>
            Determines whether the password is valid by going through all defined policies.
            </summary>
            <param name="passwordPolicy">The password policy.</param>
            <param name="password">The password.</param>
            <returns>
              <c>true</c> if the password is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.PasswordPolicyExtensions.GeneratePassword(Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Generate a new password
            </summary>
            <param name="policy">Policy that should be used when generating a new password.</param>
            <returns>A password which is not encrypted.</returns>
            <remarks>Uses characters which can't be mixed up along with <![CDATA["@!?&%/\"]]> if non alphas are required</remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.SelectContext">
            <summary>
            Context used when generating select lists
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.GeneratorContext">
            <summary>
            Context used when generating new elements.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.ITagBuilderContext">
            <summary>
            Context specific information used when generating tags.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.ITagBuilderContext.Name">
            <summary>
            Gets tag name of the root tag
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.ITagBuilderContext.FullName">
            <summary>
            Gets full name (if nested model) for the root tag
            </summary>
            <example>
            Department.Title
            </example>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.ITagBuilderContext.Metadata">
            <summary>
            Gets meta data for this element.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.ITagBuilderContext.HtmlAttributes">
            <summary>
            Gets attributes which should be used for the root tag.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.ITagBuilderContext.ViewContext">
            <summary>
            Gets view context
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.GeneratorContext.#ctor(System.String,System.String,System.Web.Mvc.ModelMetadata,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.ViewContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.Generators.GeneratorContext"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="fullName">The full name.</param>
            <param name="metadata">The metadata.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <param name="viewContext">View context</param>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.GeneratorContext.#ctor(Griffin.MvcContrib.Html.Generators.GeneratorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.Generators.GeneratorContext"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.GeneratorContext.Name">
            <summary>
            Gets input name
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.GeneratorContext.FullName">
            <summary>
            Gets full name (if nested model)
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.GeneratorContext.Metadata">
            <summary>
            Gets meta data for this element.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.GeneratorContext.HtmlAttributes">
            <summary>
            Gets attributes specified with the helper.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.SelectContext.#ctor(Griffin.MvcContrib.Html.Generators.GeneratorContext,Griffin.MvcContrib.Html.ISelectItemFormatter,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.Generators.SelectContext"/> class.
            </summary>
            <param name="context">Base context.</param>
            <param name="formatter"><see cref="P:Griffin.MvcContrib.Html.Generators.SelectContext.Formatter"/></param>
            <param name="listItems"><seealso cref="P:Griffin.MvcContrib.Html.Generators.SelectContext.ListItems"/></param>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.SelectContext.Formatter">
            <summary>
            Gets formatter used to convert model/object into a select item
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.SelectContext.ListItems">
            <summary>
            Gets a list of items that a SELECT list should be generated from
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.ISelectItemFormatter">
            <summary>
            Takes any enumerable list and creates <see cref="T:System.Web.Mvc.SelectListItem"/>:s of them
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.ISelectItemFormatter.Generate(System.Object)">
            <summary>
            Generate a new select item from an object
            </summary>
            <param name="item">Object/Model item</param>
            <returns>Select item</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Html.IFormItemAdapter">
            <summary>
            Adapters can modify the generated HTML tags.
            </summary>
            <remarks>
            Use to extend the tags or adapt them to suit your own HTML design.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Html.IFormItemAdapter.Process(Griffin.MvcContrib.Html.FormItemAdapterContext)">
            <summary>
            Process a tag
            </summary>
            <param name="context">Context with all html tag information</param>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.NamespaceDoc">
            <summary>
            All classes used to handle view translations
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidationMessages.ValidationMessageProviders">
            <summary>
            Used to supply custom validation messages for attributes.
            </summary>
            <remarks>
            <para>This class is called by <see cref="T:Griffin.MvcContrib.Localization.LocalizedModelValidatorProvider"/>
            for each attribute that a property have. It's responsibility is to use all of the language providers to get the correct translation.
            The returned message should have formatters in them.</para>
            <para>
            Default setup is using <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.GriffinStringsProvider"/> as default and <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.MvcDataSource"/> + <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.DataAnnotationDefaultStrings"/> as fallback.
            </para>
            </remarks>
            <example>When not using a container:<code>
            ValidationMessageProviders.Clear();
            ValidationMessageProviders.Add(new GriffinStringsProvider(yourLocalizedStringProvider));
            
            // for attributes in System.Web.Mvc
            ValidationMessageProviders.Add(new MvcDataSource());
            
            // For attributes in System.ComponentModel.DataAnnotations
            ValidationMessageProviders.Add(new DataAnnotationDefaultStrings());
            </code></example>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.ValidationMessageProviders.Reset">
            <summary>
            reset to the default providers.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.ValidationMessageProviders.Add(Griffin.MvcContrib.Localization.ValidationMessages.IValidationMessageDataSource)">
            <summary>
            Add another provider (last)
            </summary>
            <param name="provider">Provider to add</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.ValidationMessageProviders.Clear">
            <summary>
            Remove all providers
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.ValidationMessageProviders.GetMessage(Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext)">
            <summary>
            Get a message
            </summary>
            <param name="context">Context information</param>
            <returns>String if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="T:Griffin.MvcContrib.VisualStudioHelper">
            <summary>
            Detects if the code is running within visual studio
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.VisualStudioHelper.IsInVisualStudio">
            <summary>
            Gets if visual studio is running (or any other debugger)
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.NamespaceDoc">
            <summary>
            A bit more SOLID implementation of a membership provider.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.PasswordPolicy">
            <summary>
            Default policy object
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy">
            <summary>
            Policy which defines how passwords should be handled in the membership provider.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.MaxInvalidPasswordAttempts">
            <summary>
            Gets number of invalid password or password-answer attempts allowed before the membership user is locked out
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.IsPasswordQuestionRequired">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.IsPasswordResetEnabled">
            <summary>
            Gets whether the membership provider is configured to allow users to reset their passwords
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.IsPasswordRetrievalEnabled">
            <summary>
            Gets whether the membership provider is configured to allow users to retrieve their passwords
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.PasswordMinimumLength">
            <summary>
            Get minimum length required for a password
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets minimum number of special characters that must be present in a valid password
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordPolicy.MaxInvalidPasswordAttempts">
            <summary>
            Gets number of invalid password or password-answer attempts allowed before the membership user is locked out
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordPolicy.IsPasswordQuestionRequired">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordPolicy.IsPasswordResetEnabled">
            <summary>
            Gets whether the membership provider is configured to allow users to reset their passwords
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordPolicy.IsPasswordRetrievalEnabled">
            <summary>
            Gets whether the membership provider is configured to allow users to retrieve their passwords
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordPolicy.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordPolicy.PasswordMinimumLength">
            <summary>
            Get minimum length required for a password
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordPolicy.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets minimum number of special characters that must be present in a valid password
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordPolicy.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.NamespaceDoc">
             <summary>
             Classes making it easier to handle localization in MVC
             </summary>
             <remarks>
             The localization features can be activated in several levels. 
             <para>
             <list type="table">
             <item>
             <term>Translate only</term>
             <description>
             You need to setup the <see cref="T:Griffin.MvcContrib.Localization.LocalizedModelValidatorProvider"/> and <see cref="T:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider"/> in your
             global.asax. The easiest way to provide strings for them is to use string tables with the help of <see cref="T:Griffin.MvcContrib.Localization.ResourceStringProvider"/> class.
             </description>
             </item>
             <item>
             <term>Manage translations</term>
             <description>
             <para>
             You can also manage translations by using the <see cref="T:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository"/> and the
             <see cref="T:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository"/> interfaces. Register one of the implementations in your inversion of control
             container. Dont forget to call <c>ModelMetaDataProviders.Clear()</c>
             in your global.asax as the default provider is not compatible with the one in this library.
             </para>
             There are three available providers, flatfiles in the <c>Griffin.MvcConctrib.Localization.FlatFile</c> namespace
             and the external SqlServer package (which should work with any SQL based database) and finally the external package for RavenDb.
             </description>
             </item>
             </list>
             </para>
             <para>
             Check for instance <see cref="T:Griffin.MvcContrib.Localization.ResourceStringProvider"/> to get a description about the actual localization process.
             </para>
             <para>You can either register the providers directly in your global.asax as:
             <example>
             <code>
             public class MvcApplication : System.Web.HttpApplication
             {
                 protected void Application_Start()
                 {
                     var stringProvider = new ResourceStringProvider(ModelMetadataStrings.ResourceManager);
             
                     ModelMetadataProviders.Current = new LocalizedModelMetadataProvider(stringProvider);
            
                     // required when not using IoC.
                     ValidationMessageProviders.Clear();
                     ValidationMessageProviders.Add(new GriffinStringsProvider(st)); // the rest
                     ValidationMessageProviders.Add(new MvcDataSource()); //mvc attributes
                     ValidationMessageProviders.Add(new DataAnnotationDefaultStrings()); //data annotation attributes
             
                     ModelValidatorProviders.Providers.Clear();
                     ModelValidatorProviders.Providers.Add(new LocalizedModelValidatorProvider());
                 }
             }
             </code>
             </example>
             Which is the easiest approach if your string provider doesn't depend on a connection to a database or similar. 
             
             </para>
             <para>You can also register the providers in your container (the example uses Autofac):
             <example><code><![CDATA[
             // Loads strings from repositories.
             builder.RegisterType<RepositoryStringProvider>().AsImplementedInterfaces().InstancePerLifetimeScope();
             builder.RegisterType<ViewLocalizer>().AsImplementedInterfaces().InstancePerLifetimeScope();
             builder.RegisterType<SqlLocalizedTypesRepository>().AsImplementedInterfaces().InstancePerLifetimeScope();
             builder.RegisterType<SqlLocalizedViewsRepository>().AsImplementedInterfaces().InstancePerLifetimeScope();
             
             // Connection factory
             builder.RegisterInstance(new AdoNetConnectionFactory("DemoDb")).AsSelf();
             builder.RegisterType<LocalizationDbContext>().AsImplementedInterfaces().InstancePerLifetimeScope(); 
             ]]></code></example>
             </para>
             <para>
             There is also an administration area <c>Griffin.MvcContrib.Admin</c> which can used to handle all translations.
             </para>
             </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.NamespaceMapping">
            <summary>
              Maps a namespace to a virtual path
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.NamespaceMapping.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.NamespaceMapping"/> class.
            </summary>
            <param name="assembly"> The assembly that the views are located in. </param>
            <param name="folderNamespace"> Namespace that should correspond to the virtual path "~/". Typically root namespace in your project.</param>
            <example>
            HostingEnvironment.RegisterVirtualPathProvider(GriffinVirtualPathProvider.Current);
            
            var embeddedProvider = new EmbeddedViewFileProvider();
            embeddedProvider.Add(new NamespaceMapping(typeof (GriffinHomeController).Assembly, "Griffin.MvcContrib"));
            
            GriffinVirtualPathProvider.Current.Add(embeddedProvider);
            </example>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.NamespaceMapping.Assembly">
            <summary>
              Gets assembly that the embedded views are located in
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.NamespaceMapping.FolderNamespace">
            <summary>
              Gets namespace that corresponds to application root
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.ViewPromptKey">
            <summary>
            View prompt key.
            </summary>
            <remarks>The key is only unique for the current language only. This is a requirement
            to be able to translate prompts between languages</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Views.ViewPromptKey"/> class.
            </summary>
            <param name="viewPath">The view path (normally <see cref="P:System.Uri.AbsolutePath"/>*).</param>
            <param name="textName">Name of the text.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Views.ViewPromptKey"/> class.
            </summary>
            <param name="md5Hash">Already computed hash.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.Equals(Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.op_Equality(Griffin.MvcContrib.Localization.Views.ViewPromptKey,Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="viewPromptKey">The view prompt key.</param>
            <param name="viewPromptKey2">The view prompt key2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.op_Inequality(Griffin.MvcContrib.Localization.Views.ViewPromptKey,Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="viewPromptKey">The view prompt key.</param>
            <param name="viewPromptKey2">The view prompt key2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.GetViewPath(System.String,System.Web.Routing.RouteData)">
            <summary>
            Generate a view path from route data 
            </summary>
            <param name="viewPath">VirtualPath to document (includes "~/Views and filename")</param>
            <param name="routeData">Route to create</param>
            <returns>Routed string</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.GetViewPath(System.Web.Routing.RouteData)">
            <summary>
            Generate a view path from route data 
            </summary>
            <param name="routeData">Route to create</param>
            <returns>Routed string</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Griffin.MvcContrib.Html.TagsExtensions">
            <summary>
            Extension methods for Tag collection
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.TagsExtensions.ToMvcString(System.Collections.Generic.IEnumerable{System.Web.Mvc.TagBuilder})">
            <summary>
            Converts a collection into a html string
            </summary>
            <param name="tags">The tags.</param>
            <returns>String</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Html.FormHtmlHelper`1">
            <summary>
            Facade to be able to use the Helpers as drop in replacements to the ones in MVC3. (Just do a replace all)
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="T:Griffin.MvcContrib.Html.HtmlHelperFor`1">
            <summary>
            Base class for all new HtmlHelper facades.
            </summary>
            <typeparam name="TModel">Strongly typed model type ;)</typeparam>
        </member>
        <member name="M:Griffin.MvcContrib.Html.HtmlHelperFor`1.#ctor(System.Web.Mvc.HtmlHelper{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.HtmlHelperFor`1"/> class.
            </summary>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Html.HtmlHelperFor`1.GetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get value from the property
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.HtmlHelperFor`1.GetMetadata``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get meta data from MVC metadata provider
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.HtmlHelperFor`1.GetUnobtrusiveValidationAttributes(System.String,System.Web.Mvc.ModelMetadata)">
            <summary>
            Get validation attributes
            </summary>
            <param name="name"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.HtmlHelperFor`1.GetFullHtmlFieldName(System.String)">
            <summary>
            Get field name to use in HTML forms
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.HtmlHelperFor`1.GetInputValue(System.String,System.Web.Mvc.ModelMetadata)">
            <summary>
            Gets input value either from model state or from the model itself
            </summary>
            <param name="name"></param>
            <param name="metadata"></param>
            <returns></returns>
            <remarks>
            Will use <see cref="P:System.Web.Mvc.ModelMetadata.EditFormatString"/> if it has been specified.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Html.HtmlHelperFor`1.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Convert lambda expression to a property name (nesting supported)
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="property">Property expression</param>
            <returns>Property name as string</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Html.HtmlHelperFor`1.ModelType">
            <summary>
            Type of model
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Html.HtmlHelperFor`1.ViewData">
            <summary>
            Gets current view data
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.#ctor(System.Web.Mvc.HtmlHelper{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.FormHtmlHelper`1"/> class.
            </summary>
            <param name="helper">The helper.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.BeginForm(System.String,System.String,System.Web.Mvc.FormMethod,System.Object,System.Object)">
            <summary>
            Begins the form.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="method">The method.</param>
            <param name="routeValues">The route values.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.CreateInputContext``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Creates the input context.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.EditorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Create an
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.TextBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Texts the box for.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.TextAreaFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Object)">
            <summary>
            Texts the area for.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="rows">The rows.</param>
            <param name="columns">The columns.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.DropdownFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Dropdowns for.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.DropdownFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object,System.Object)">
            <summary>
            Generate a drop down list.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="items">The items.</param>
            <param name="selectedItem">The selected item.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.CheckBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Generate a set of radio buttons using an enum
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="property">Property that the helper is for</param>
            <param name="htmlAttributes">Extra HTML attributes</param>
            <returns>Generated HTML.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.RadioButtonFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Object)">
            <summary>
            Generate a radio button
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="property">Property that the helper is for</param>
            <param name="value">Value for the ratio button</param>
            <param name="htmlAttributes">Extra HTML attributes</param>
            <returns>Generated HTML.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.RadioButtonsFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Generate a set of radio buttons using an enum
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="property">Property that the helper is for</param>
            <param name="htmlAttributes">Extra HTML attributes</param>
            <returns>Generated HTML.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.RadioButtonsFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.IEnumerable,System.Object)">
            <summary>
            Generate a set of radio buttons using an enum
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="property">Property that the helper is for</param>
            <param name="items">A list of different choices</param>
            <param name="htmlAttributes">Extra HTML attributes</param>
            <returns>Generated HTML.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.CheckBoxesFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Generate check boxes for a property which is of a enum type.
            </summary>
            <typeparam name="TProperty">Type of property</typeparam>
            <param name="property">Property expression</param>
            <param name="htmlAttributes">Optional extra HTML attributes</param>
            <returns>Generated HTML string</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.InvokeFormItemAdapters(System.Web.Mvc.ModelMetadata,System.Collections.Generic.IEnumerable{Griffin.MvcContrib.Html.NestedTagBuilder})">
            <summary>
            Invoke all adapters that are registered in the inversion of control container.
            </summary>
            <param name="metadata">Model meta data</param>
            <param name="tagBuilders">Tag generated by the HTML helper</param>
            <remarks>Uses <see cref="T:System.Web.Mvc.DependencyResolver"/> to find all adapters. Do not forget to register your adapter with a name, or
            Unity wont find all adapters that are registered.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormHtmlHelper`1.InvokeHtmlTagAdapters(System.Collections.Generic.IEnumerable{Griffin.MvcContrib.Html.NestedTagBuilder})">
            <summary>
            Invoke all adapters that are registered in the inversion of control container.
            </summary>
            <param name="tagBuilders">Tag generated by the HTML helper</param>
            <remarks>Uses <see cref="T:System.Web.Mvc.DependencyResolver"/> to find all adapters. Do not forget to register your adapter with a name, or
            Unity wont find all adapters that are registered.</remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.FormTagGenerator">
            <summary>
            Base class for all FORM tag generators
            </summary>
            <remarks>
            Tag generators are used in MVC views to generate HTML tags with the help of html helpers.
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.ITagBuilder">
            <summary>
            Used to generate a <see cref="T:Griffin.MvcContrib.Html.NestedTagBuilder"/> for a specific HTML tag.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.ITagBuilder.Generate(Griffin.MvcContrib.Html.Generators.ITagBuilderContext)">
            <summary>
            Generate a set of tags
            </summary>
            <param name="context">Context used during generation</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.FormTagGenerator.GenerateOptions(System.Collections.IEnumerable,System.String,Griffin.MvcContrib.Html.ISelectItemFormatter)">
            <summary>
            Generate options
            </summary>
            <param name="items">Items used to generate options</param>
            <param name="selectedValue">Selected value</param>
            <param name="formatter">Formatter used to find label/value. May be null if the list contains <c>SelectListItem</c></param>
            <returns>Generated <c>option</c> tags</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.FormTagGenerator.GenerateOptions(System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
            <summary>
            Generate options from a a list of items
            </summary>
            <param name="items">Items to generate option tags for</param>
            <param name="selectedValue">Selected value</param>
            <returns>Generated option tags</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.FormTagGenerator.Setup(Griffin.MvcContrib.Html.Generators.ITagBuilderContext)">
            <summary>
            I know, really. Setup/Init methods are a pain and spawn of satan and all that. But I couldn't figure out a  better solution.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.FormTagGenerator.Generate(Griffin.MvcContrib.Html.Generators.ITagBuilderContext)">
            <summary>
            Generate HTML tags for a property
            </summary>
            <param name="context">Context specific information</param>
            <returns>Generated HTML tags</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.FormTagGenerator.GenerateTags">
            <summary>
            Generated all used tags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.FormTagGenerator.CreatePrimaryTag(System.String)">
            <summary>
            Generates the primary/root tag (which will contain child tags if required)
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns>Tag builder for the tag</returns>
            <remarks>Adds all HTML attributes which has been specified in the Context, the name and the ID. Will
            also add any validation state members.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.FormTagGenerator.GetValue">
            <summary>
            Get value for the model
            </summary>
            <returns>Model value</returns>
            <remarks>Value will either be the one from the previous POST or the one assigned in the model.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.FormTagGenerator.GetFullHtmlFieldName(System.String)">
            <summary>
            Gets the full name of the HTML field.
            </summary>
            <param name="name">The name.</param>
            <returns>dot notated field name</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.FormTagGenerator.Context">
            <summary>
            Gets generator context
            </summary>
            <remarks>Contains information used to generate tags such as ModelMetaData.</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Html.Generators.FormTagGenerator.LocalizedStringProvider">
            <summary>
            Gets provider used to load localized strings from any source
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Logging.NullLogger">
            <summary>
            Logs to nothing
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Logging.ILogger">
            <summary>
            Logging interface
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.ILogger.Debug(System.String)">
            <summary>
            Write a debug message
            </summary>
            <param name="message">Message to write</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Write a debug message and recursive exception trace (write out all inner exceptions)
            </summary>
            <param name="message">Message to write</param>
            <param name="exception">Exception to log</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.ILogger.Warning(System.String)">
            <summary>
            Warning (something unexpected but the framework can continue as expected)
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.ILogger.Warning(System.String,System.Exception)">
            <summary>
            Write a warning message and recursive exception trace (write out all inner exceptions)
            </summary>
            <param name="message">Message to write</param>
            <param name="exception">Exception to log</param>
        </member>
        <member name="F:Griffin.MvcContrib.Logging.NullLogger.Instance">
            <summary>
            Gets logger instance.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.NullLogger.Debug(System.String)">
            <summary>
            Write a debug message
            </summary>
            <param name="message">Message to write</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.NullLogger.Debug(System.String,System.Exception)">
            <summary>
            Write a debug message and recursive exception trace (write out all inner exceptions)
            </summary>
            <param name="message">Message to write</param>
            <param name="exception">Exception to log</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.NullLogger.Warning(System.String)">
            <summary>
            Warning (something unexpected but the framework can continue as expected)
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.NullLogger.Warning(System.String,System.Exception)">
            <summary>
            Write a warning message and recursive exception trace (write out all inner exceptions)
            </summary>
            <param name="message">Message to write</param>
            <param name="exception">Exception to log</param>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.FlatFile.NamespaceDoc">
            <summary>
            Stores localization strings in JSON files in App_Data
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.DefaultUICulture">
            <summary>
              Sets the default culture (UICulture) which is used in the localization process
            </summary>
            <remarks>
              The default culture will not get translation missing tags etc.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.DefaultUICulture.Reset">
            <summary>
            Reset to framework default culture (1033)
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.DefaultUICulture.Set(System.Globalization.CultureInfo)">
            <summary>
              Sets the specified culture.
            </summary>
            <param name="culture"> The culture. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.DefaultUICulture.Is(System.Globalization.CultureInfo)">
            <summary>
            Gets if the default culture is the specified one.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.DefaultUICulture.Value">
            <summary>
              Gets current default culture
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.DefaultUICulture.IsEnglish">
            <summary>
            Gets if english is used as default language.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.DefaultUICulture.IsActive">
            <summary>
            Gets if <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>  is the default culture
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.DefaultUICulture.LCID">
            <summary>
            Gets locale id
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.NoCache">
            <summary>
            Use this implementation to indicate that no cache should be used.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.NoCache.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.NoCache"/> class from being created.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.NoCache.Instance">
            <summary>
            Gets current instance.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo">
            <summary>
            Information used by the password strategies.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo.PasswordSalt">
            <summary>
            Gest or sets the salt which was used when hashing the password.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo.Password">
            <summary>
            Gets the password
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo.UserName">
            <summary>
            Gets username for the accoount
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.IValidationAttributeAdapterFactory">
            <summary>
            Create validation rules for an attribute.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.IValidationAttributeAdapterFactory.Create(System.ComponentModel.DataAnnotations.ValidationAttribute,System.String)">
            <summary>
            Generate client rules for a validation attribute
            </summary>
            <param name="attribute">Attribute to get rules for</param>
            <param name="errorMessage">Message to display</param>
            <returns>Validation rules</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidationMessages.GetMessageContext">
            <summary>
            Context information used to be able to identify and load the correct translation
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext">
            <summary>
            Context used when fetching the string from one of the <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.IValidationMessageDataSource"/>.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext.Attribute">
            <summary>
            Gets attribute to get a message for
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext.ContainerType">
            <summary>
            Gets type for the model that the property exists in
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext.PropertyName">
            <summary>
            Gets property that the attribute is for
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext.CultureInfo">
            <summary>
            Gets culture that we want a message for
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.GetMessageContext.#ctor(System.ComponentModel.DataAnnotations.ValidationAttribute,System.Type,System.String,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.GetMessageContext"/> class.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="containerType">Model that the property is in.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="cultureInfo">Requested language.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidationMessages.GetMessageContext.Attribute">
            <summary>
            Gets attribute to get message for.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidationMessages.GetMessageContext.ContainerType">
            <summary>
            Gets model that the property exists in
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidationMessages.GetMessageContext.PropertyName">
            <summary>
            Gets name of the target property
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidationMessages.GetMessageContext.CultureInfo">
            <summary>
            Gets requested language
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Json.JsonSerializer">
            <summary>
            Used to serialize the objects.
            </summary>
            <remarks>
            RavenDB currently only supports Newtonsoft.Json v4.0.8 which is kind of old when 4.5.x exists. I therefore
            decided to remove the Newtonsoft.Json dependency since I do not want to force the non-raven users to use
            an old version of Newtonsoft.Json. You can create the support yourself by using the code sample below (after installing
            the Newtonsoft.Json nuget package).
            </remarks>
            <example>
            <code>
            public class NewtonsoftSerializer : JsonSerializer
            {
                public override string Serialize(object value)
                {
                    return JsonConvert.SerializeObject(value);
                }
            }
            JsonSerializer.Assign(new NewtonsoftSerializer());
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.Json.JsonSerializer.Assign(Griffin.MvcContrib.Json.JsonSerializer)">
            <summary>
            Assign a serializer implementation.
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:Griffin.MvcContrib.Json.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serialize an object.
            </summary>
            <param name="value">value to serialize</param>
            <returns>A string</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Json.JsonSerializer.Current">
            <summary>
            Gets current instance
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.NamespaceDoc">
            <summary>
            The classes that generates the tags (and are fetched using Service Location by the view page)
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Caching.NoCacheAttribute">
            <summary>
            Do not cache anything
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Caching.NoCacheAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Caching.NoCacheAttribute"/> class.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection">
            <summary>
            all prompts for a language
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection"/> class.
            </summary>
            <param name="culture">The culture that the translation is for.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.Add(Griffin.MvcContrib.Localization.Views.ViewPrompt)">
            <summary>
            Add a new prompt
            </summary>
            <param name="prompt">Found prompt</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.GetPrompt(System.String,Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            Get a specific prompt
            </summary>
            <param name="viewPath">Absolute paht to the view </param>
            <param name="key">Key to find</param>
            <returns>Translation if found; oterwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.AddRange(System.Collections.Generic.IEnumerable{Griffin.MvcContrib.Localization.Views.ViewPrompt})">
            <summary>
            Add a collection of prompts
            </summary>
            <param name="items">Prompts to add</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.Get(Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            Gets the specified prompt
            </summary>
            <param name="id">The id.</param>
            <returns>Prompt if found; otherwise <c>null</c></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.Delete(Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            delete prompt with the specified key
            </summary>
            <param name="key">key</param>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.FlatFile.ViewPromptCollection.Culture">
            <summary>
            Gets current culture
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.SearchFilter">
            <summary>
            Used to filter localization prompts
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.SearchFilter.Path">
            <summary>
            Gets or sets beginning of the path to the prompts.
            </summary>
            <remarks>Path depends on the repository type. It might be namespace for type localization or View path for view localization</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.SearchFilter.TextFilter">
            <summary>
            Gets or sets start of text prompt
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.SearchFilter.PageNumber">
            <summary>
            Gets or sets page to get
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.SearchFilter.PageSize">
            <summary>
            Gets or sets number of items per page.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.SearchFilter.OnlyNotTranslated">
            <summary>
            Gets or sets if only prompts which has not been translated should be shown.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Json.ErrorMessage">
            <summary>
            Display an error message for the user
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ErrorMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Json.ErrorMessage"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ErrorMessage.ToString">
            <summary>
            Gets message to display
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Json.ErrorMessage.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Plugins.PluginFinder">
            <summary>
            Finds all plugins and load them into the app domain (or use previously loaded assemblies)
            </summary>
            <remarks>
            Loads all plugins whos file name starts with "Plugin." </remarks>
            <seealso cref="N:Griffin.MvcContrib.Plugins"/>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.PluginFinder.#ctor(System.String)">
            <summary>
              Initializes the <see cref="T:Griffin.MvcContrib.Plugins.PluginFinder"/> class.
            </summary>
            <param name="virtualPluginFolderPath"> App relative path to plugin folder </param>
            <example>
              <code>var loader = new PluginLoader("~/"); // all plugins are located in the root folder.</code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.PluginFinder.Find">
            <summary>
            Called during startup to scan for all plugin assemblies
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.PluginFinder.Find(System.String)">
            <summary>
            Called during startup to scan for all plugin assemblies, specifing the plugin filter
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.PluginFinder.Assemblies">
            <summary>
              Gets all loaded plugin assemblies.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Json.ValidationRules">
            <summary>
              Returns all validation rules for a model
            </summary>
            <remarks>
              The rules (and their error messages) are formatted as the jQuery validation plugin wants them. So you can just pass them as options like this: <c>$('#yourform').validate(response.body)</c> .
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Json.ValidationRules.Messages">
            <summary>
              Gets error messages
            </summary>
            <remarks>
              the value is a formatted error message
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Json.ValidationRules.Rules">
            <summary>
              Gets rules collection
            </summary>
            <remarks>
              The rule name is the name which is used by the jQuery.validator plugin. Value are the options which is used by the rule. For instance the "max" rule takes "40" as the value if the max length is 40.
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.SqlRepository.ISqlAdapter">
            <summary>
            Used to generate vendor specific SQL statements.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.ISqlAdapter.PageSql(System.String,System.Int32,System.Int32)">
            <summary>
            Add paging to the SQL
            </summary>
            <param name="sql">SQL statement that needs paging.</param>
            <param name="page">Onebased index.</param>
            <param name="rowsPerPage">The number of rows per page.</param>
            <returns>Paged SQL statement</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository">
            <summary>
              Uses files to store translated view strings
            </summary>
            <remarks>
              <para>Caches all strings in memory which means that you should keep a single instance of the repository
                if you need performance.</para> <para>The current implementation stores the files in your appdata folder using the JSON serializer. You
                                                  can switch locactions or serializer by deriving the class and implement
                                                  <see cref="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.GetFullPath(System.Globalization.CultureInfo)"/>
                                                  or
                                                  <see cref="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.Serialize(System.IO.Stream,System.Collections.Generic.List{Griffin.MvcContrib.Localization.Views.ViewPrompt})"/>
                                                  and
                                                  <see cref="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.Deserialize(System.IO.Stream)"/>
                                                  .</para>
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.GetAllPrompts(System.Globalization.CultureInfo,System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.SearchFilter)">
            <summary>
              Get all prompts that have been created for an language
            </summary>
            <param name="culture"> Culture to get translation for </param>
            <param name="templateCulture"> Culture to find not translated prompts in (or same culture to disable) </param>
            <param name="filter"> Used to limit the search result </param>
            <returns> A collection of prompts </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.CreateLanguage(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
              Create translation for a new language
            </summary>
            <param name="culture"> Language to create </param>
            <param name="templateCulture"> Language to use as a template </param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.GetAvailableLanguages">
            <summary>
              Get all languages that have translations
            </summary>
            <returns> Collection of languages </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.GetPrompt(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
              Get a text using it's name.
            </summary>
            <param name="culture"> Culture to get prompt for </param>
            <param name="key"> </param>
            <returns> Prompt if found; otherwise null. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.Save(System.Globalization.CultureInfo,System.String,System.String,System.String)">
            <summary>
              Save/Update a text prompt
            </summary>
            <param name="culture"> Language to save prompt in </param>
            <param name="viewPath"> Path to view. You can use <see cref="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.GetViewPath(System.String,System.Web.Routing.RouteData)"/> </param>
            <param name="textName"> Text to translate </param>
            <param name="translatedText"> Translated text </param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.Exists(System.Globalization.CultureInfo)">
            <summary>
              Existses the specified culture info.
            </summary>
            <param name="cultureInfo"> The culture info. </param>
            <returns> </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.CreatePrompt(System.Globalization.CultureInfo,System.String,System.String,System.String)">
            <summary>
              Create a new prompt in the specified language
            </summary>
            <param name="culture"> Language that the translation is for </param>
            <param name="viewPath"> Path to view. You can use <see cref="M:Griffin.MvcContrib.Localization.Views.ViewPromptKey.GetViewPath(System.String,System.Web.Routing.RouteData)"/> </param>
            <param name="textName"> Text to translate </param>
            <param name="translatedText"> Translated text </param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.Delete(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Views.ViewPromptKey)">
            <summary>
            Delete  a phrase
            </summary>
            <param name="culture">Culture to delete the phrase in</param>
            <param name="key">Unique key within a language</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.LoadLanguage(System.Globalization.CultureInfo)">
            <summary>
            Load a language
            </summary>
            <param name="culture">Culture to load for</param>
            <returns>Language if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.Serialize(System.IO.Stream,System.Collections.Generic.List{Griffin.MvcContrib.Localization.Views.ViewPrompt})">
            <summary>
              Serialize items into the specified stream
            </summary>
            <param name="stream"> Stream to serialize to </param>
            <param name="prompts"> Prompts to serialize </param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.Deserialize(System.IO.Stream)">
            <summary>
              Deserialize items from a stream
            </summary>
            <param name="stream"> Stream containing serialized items </param>
            <returns> Collection of items (or an empty collection) </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.GetLanguage(System.Globalization.CultureInfo)">
            <summary>
              Get language for the specified culture
            </summary>
            <param name="culture"> Requested culture </param>
            <returns> A collection of prompts (will create a new collection if it do not exist) </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.PromptEqualityComparer.Equals(Griffin.MvcContrib.Localization.Views.ViewPrompt,Griffin.MvcContrib.Localization.Views.ViewPrompt)">
            <summary>
              Determines whether the specified objects are equal.
            </summary>
            <returns> true if the specified objects are equal; otherwise, false. </returns>
            <param name="x"> The first object of type ViewPrompt to compare. </param>
            <param name="y"> The second object of type ViewPrompt to compare. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.ViewLocalizationFileRepository.PromptEqualityComparer.GetHashCode(Griffin.MvcContrib.Localization.Views.ViewPrompt)">
            <summary>
              Returns a hash code for the specified object.
            </summary>
            <returns> A hash code for the specified object. </returns>
            <param name="obj"> The <see cref="T:System.Object" /> for which a hash code is to be returned. </param>
            <exception cref="T:System.ArgumentNullException">The type of
              <paramref name="obj" />
              is a reference type and
              <paramref name="obj" />
              is null.</exception>
        </member>
        <member name="T:Griffin.MvcContrib.Json.AllowCrossSiteJsonAttribute">
            <summary>
            Allow cross site scripting for a controller or an action.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Json.AllowCrossSiteJsonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Json.AllowCrossSiteJsonAttribute"/> class.
            </summary>
            <remarks>Allows cross site scripting from everywhere.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Json.AllowCrossSiteJsonAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Json.AllowCrossSiteJsonAttribute"/> class.
            </summary>
            <param name="allowOrigin">Allows cross site scripting from the specified domain only.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Json.AllowCrossSiteJsonAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Called by the ASP.NET MVC framework before the action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.IEmbeddedViewFixer">
            <summary>
            Used to correct embedded views
            </summary>
            <remarks>The purpose of the class is to allow the embedded views to look exactly as regular views without @inherits or anything like that.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IEmbeddedViewFixer.CorrectView(System.String,System.IO.Stream)">
            <summary>
            Modify the view
            </summary>
            <param name="virtualPath">Path to view</param>
            <param name="stream">Stream containing the original view</param>
            <returns>Stream with modified contents</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Html.FormItemAdapterContext">
            <summary>
            Context used by <seealso cref="T:Griffin.MvcContrib.Html.IFormItemAdapter"/>.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.HtmlTagAdapterContext">
            <summary>
            Context used by <seealso cref="T:Griffin.MvcContrib.Html.IHtmlTagAdapter"/>.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.HtmlTagAdapterContext.#ctor(Griffin.MvcContrib.Html.NestedTagBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.FormItemAdapterContext"/> class.
            </summary>
            <param name="tagBuilder">Generated tag builder.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Html.HtmlTagAdapterContext.TagBuilder">
            <summary>
            Gets generated tag
            </summary>
            <remarks>Either adapt the tag and it's content or replace it with a new one.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Html.FormItemAdapterContext.#ctor(Griffin.MvcContrib.Html.NestedTagBuilder,System.Web.Mvc.ModelMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.FormItemAdapterContext"/> class.
            </summary>
            <param name="tagBuilder">Generated tag builder.</param>
            <param name="metadata">Model metadata.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Html.FormItemAdapterContext.Metadata">
            <summary>
            Gets model metadata
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Logging.NamespaceDoc">
            <summary>
            Logging abstration layer
            </summary>
            <remarks>
            Create a class which implements <see cref="T:Griffin.MvcContrib.Logging.ILogger"/> and uses your favorite logging framework internally.
            Then create a class which inherits <see cref="T:Griffin.MvcContrib.Logging.LogProvider"/> and assign it using <c>LogProvider.Current</c>.
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidatableObjectAdapter">
            <summary>
            Adapter which convers the result from <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/> to <see cref="T:System.Web.Mvc.ModelValidationResult"/>
            </summary>
            <remarks>Client side validation will only work if the rules from <see cref="M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)"/> implements <see cref="T:Griffin.MvcContrib.Localization.IClientValidationRule"/></remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidatableObjectAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.ValidatableObjectAdapter"/> class.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="controllerContext">The controller context.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidatableObjectAdapter.GetClientValidationRules">
            <summary>
            When implemented in a derived class, returns metadata for client validation.
            </summary>
            <returns>
            The metadata for client validation.
            </returns>
            <remarks>Will only work if the rules from <see cref="M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)"/> implements <see cref="T:Griffin.MvcContrib.Localization.IClientValidationRule"/></remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidatableObjectAdapter.Validate(System.Object)">
            <summary>
            When implemented in a derived class, validates the object.
            </summary>
            <param name="container">The container.</param>
            <returns>
            A list of validation results.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.ValidatableObjectAdapter.IsRequired">
            <summary>
            Gets or sets a value that indicates whether a model property is required.
            </summary>
            <returns>true if the model property is required; otherwise, false.</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Roles.RoleProvider">
            <summary>
            Provides roles through a repository
            </summary>
            <remarks>
            You need to register a  <see cref="T:Griffin.MvcContrib.Providers.Roles.IRoleRepository"/> in your inversion of control container. This classes
            uses <see cref="T:System.Web.Mvc.DependencyResolver"/> to find it's dependencies.
            </remarks>
            <example>
            <code>
            <![CDATA[
            public class MvcApplication : System.Web.HttpApplication
            {
                protected void Application_Start()
                {
                    _unity.RegisterType<IRoleRepository, RavenDbRepository>();
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
              
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
              
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.</exception>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
            <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
            <param name="username">The user name to search for.</param><param name="roleName">The role to search in.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.GetRolesForUser(System.String)">
            <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
            <param name="username">The user to return a list of roles for.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
            <param name="roleName">The name of the role to create.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
            <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
            <param name="roleName">The name of the role to delete.</param><param name="throwOnPopulatedRole">If true, throw an exception if <paramref name="roleName"/> has one or more members and do not delete <paramref name="roleName"/>.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.RoleExists(System.String)">
            <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
            <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
            <param name="roleName">The name of the role to search for in the data source.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be added to the specified roles. </param><param name="roleNames">A string array of the role names to add the specified user names to.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">A string array of user names to be removed from the specified roles. </param><param name="roleNames">A string array of role names to remove the specified user names from.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.GetUsersInRole(System.String)">
            <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
            <param name="roleName">The name of the role to get the list of users for.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.RoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
            <returns>
            A string array containing the names of all the users where the user name matches <paramref name="usernameToMatch"/> and the user is a member of the specified role.
            </returns>
            <param name="roleName">The role to search in.</param><param name="usernameToMatch">The user name to search for.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Roles.RoleProvider.Repository">
            <summary>
            Gets repository used to retrieve information from the data source.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Roles.RoleProvider.ApplicationName">
            <summary>
            Gets or sets the name of the application to store and retrieve role information for.
            </summary>
            <returns>
            The name of the application to store and retrieve role information for.
            </returns>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy">
            <summary>
            Hash a password using a salt.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy.Encrypt(Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo)">
            <summary>
            Encrypt a password
            </summary>
            <param name="account">Account information used to encrypt password</param>
            <returns>
            encrypted password.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy.Decrypt(System.String)">
            <summary>
            Decrypt a password
            </summary>
            <param name="password">Encrpted password</param>
            <returns>Decrypted password if decryption is possible; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy.GeneratePassword(Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Generate a new password
            </summary>
            <param name="policy">Policy that should be used when generating a new password.</param>
            <returns>A password which is not encrypted.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy.Compare(Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo,System.String)">
            <summary>
            Compare if the specified password matches the encrypted password
            </summary>
            <param name="account">Stored acount informagtion.</param>
            <param name="clearTextPassword">Password specified by user.</param>
            <returns>
            true if passwords match; otherwise null
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy.IsValid(System.String,Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Checks if the specified password is valid
            </summary>
            <param name="password">Password being checked</param>
            <param name="passwordPolicy">Policy used to validate password.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy.CreateSalt(System.Int32)">
            <summary>
            Create a salt and convert it to base64
            </summary>
            <param name="size">The size.</param>
            <returns>Base64 generated salt.</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy.IsPasswordsDecryptable">
            <summary>
            Gets if passwords can be decrypted.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.HashPasswordStrategy.PasswordFormat">
            <summary>
            Gets how passwords are stored in the database.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.TextAreaGenerator">
            <summary>
            Text area generator
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.DiskFileLocator">
            <summary>
              Maps files on the hard drive.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.IViewFileLocator">
            <summary>
            Used to locate files on disk for the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.IViewFileProvider"/>.
            </summary>
            <example>
            <code>
            public class DiskFileLocator : IViewFileProvider
            {
                string _startUri;
                string _diskRoot;
            
                public DiskFileLocator(string startUri, string diskRoot)
                {
                    _diskRoot = diskRoot;
                    _startUri =  startUri;
                }
            
                public string GetFullPath(string uri)
                {
                     if (!uri.ToLower().StartWith(_startUri))
                         return null;
            
                     var path = uri.Remove(0, _startUri.Length).Replace('/', '\\');
                     path = Path.Combine(_diskRoot, path);
                     if (File.Exists(path))
                         return path;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IViewFileLocator.GetFullPath(System.String)">
            <summary>
            Get full path to a file
            </summary>
            <param name="uri">Requested uri</param>
            <returns>Full disk path if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IViewFileLocator.SetAllowedExtensions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set extensions that are allowed to be scanned.
            </summary>
            <param name="fileExtensions">File extensions without the dot.</param>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.DiskFileLocator.GetFullPath(System.String)">
            <summary>
              Get full path to a file
            </summary>
            <param name="uri"> Requested uri </param>
            <returns> Full disk path if found; otherwise null. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.DiskFileLocator.SetAllowedExtensions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set extensions that are allowed to be scanned.
            </summary>
            <param name="fileExtensions">File extensions without the dot.</param>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.DiskFileLocator.IsFileAllowed(System.String)">
            <summary>
            determins if the found embedded file might be mapped and provided.
            </summary>
            <param name="fullPath">Full path to the file</param>
            <returns><c>true</c> if the file is allowed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.DiskFileLocator.Add(System.String,System.String)">
            <summary>
              Adds the specified root URI.
            </summary>
            <param name="rootUri"> Root uri (must be the first part of the URI for this class to handle the request). </param>
            <param name="rootPath"> Location on disk drive which corresponds to the root uri. </param>
            <example>
              <code>fileLocator.Add("/files/", @"C:\inetpub\wwwroot\mysite\public");</code>
            </example>
        </member>
        <member name="T:Griffin.MvcContrib.Plugins.IMenuItem">
            <summary>
            A menu item
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.IMenuItem.CreateUri(System.Web.Mvc.UrlHelper)">
            <summary>
            Creates the uri which should be visited when the item is clicked
            </summary>
            <param name="helper">Uri helper (to be able to generate absolute uris)</param>
            <returns>Created URI</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.IMenuItem.Title">
            <summary>
            Gets title to display
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.IMenuItem.Name">
            <summary>
            Gets name (used as HTML id)
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.IMenuItem.IsVisible">
            <summary>
            Gets if the item is visible (user have the correct role)
            </summary>
            <returns>true if user has the correct role; otherwise false.</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Json.NameKeyValueList">
            <summary>
              Double dictionary used by <see cref="T:Griffin.MvcContrib.Json.ValidationRules"/> .
            </summary>
            <remarks>Created to get a proper serialization of the items. Feel free to contribute a nicer solution.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Json.NameKeyValueList.GetEnumerator">
            <summary>
              Gets the enumerator.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Json.NameKeyValueList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Json.NameKeyValueList.Add(System.String,System.String,System.String)">
            <summary>
              Add a new value
            </summary>
            <param name="propertyName"> View model property name </param>
            <param name="ruleName"> jQuery.validator rule name </param>
            <param name="value"> Depends on the usage </param>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.DefaultTagBuilderFactory">
            <summary>
            Creates the tag builders which are used to format the tags.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.ITagBuilderFactory">
            <summary>
            Used to create tag builders.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.ITagBuilderFactory.Create(System.String)">
            <summary>
            Create a new tag builder
            </summary>
            <param name="tagName">Name of html tag, lower case.</param>
            <returns>Builder used to generate the tag (if tag has been mapped); otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.ITagBuilderFactory.Create(System.String,System.String)">
            <summary>
            Create a new tag builder
            </summary>
            <param name="tagName">Name of html tag, lower case.</param>
            <param name="type">Sub type (for instance "type" attribute in input tags)</param>
            <returns>Builder used to generate the tag (if tag+type has been mapped); otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.DefaultTagBuilderFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.Generators.DefaultTagBuilderFactory"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.DefaultTagBuilderFactory.Create(System.String)">
            <summary>
            Create a new tag builder
            </summary>
            <param name="tagName">Name of HTML tag to generate</param>
            <returns>Tag builder</returns>
            <remarks>Should only be invoked for HTML tags which do not have a sub type.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.DefaultTagBuilderFactory.Create(System.String,System.String)">
            <summary>
            Create a tag builder for a specific sub type
            </summary>
            <param name="tagName">Name of HTML tag to generate</param>
            <param name="type">Sub type (for instance the "type" attribute of INPUT tags)</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.DefaultTagBuilderFactory.Map(System.String,Griffin.MvcContrib.Html.Generators.ITagBuilderFactory)">
            <summary>
            Map a factory to a tag
            </summary>
            <param name="tagName"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.DefaultTagBuilderFactory.Map(System.String,System.String,Griffin.MvcContrib.Html.Generators.ITagBuilderFactory)">
            <summary>
            Map a factory to a tag
            </summary>
            <param name="tagName">Name of HTML tag to generate</param>
            <param name="type">Sub type (for instance the "type" attribute of INPUT tags)</param>
            <param name="factory">Factory used to produce tag builders</param>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Profile.ProfileProvider">
            <summary>
            
            Work in progress, dont use.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the specified application instance and settings property group.
            </summary>
            <returns>
            A <see cref="T:System.Configuration.SettingsPropertyValueCollection"/> containing the values for the specified settings property group.
            </returns>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"/> describing the current application use.</param><param name="collection">A <see cref="T:System.Configuration.SettingsPropertyCollection"/> containing the settings property group whose values are to be retrieved.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Sets the values of the specified group of property settings.
            </summary>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"/> describing the current application usage.</param><param name="collection">A <see cref="T:System.Configuration.SettingsPropertyValueCollection"/> representing the group of property settings to set.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.DeleteProfiles(System.Web.Profile.ProfileInfoCollection)">
            <summary>
            When overridden in a derived class, deletes profile properties and information for the supplied list of profiles.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="profiles">A <see cref="T:System.Web.Profile.ProfileInfoCollection"/>  of information about profiles that are to be deleted.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.DeleteProfiles(System.String[])">
            <summary>
            When overridden in a derived class, deletes profile properties and information for profiles that match the supplied list of user names.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="usernames">A string array of user names for profiles to be deleted.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.DeleteInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime)">
            <summary>
            When overridden in a derived class, deletes all user-profile data for profiles in which the last activity date occurred before the specified date.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are deleted.</param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  value of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.GetNumberOfInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime)">
            <summary>
            When overridden in a derived class, returns the number of profiles in which the last activity date occurred on or before the specified date.
            </summary>
            <returns>
            The number of profiles in which the last activity date occurred on or before the specified date.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.GetAllProfiles(System.Web.Profile.ProfileAuthenticationOption,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves user profile data for all profiles in the data source.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information for all profiles in the data source.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="pageIndex">The index of the page of results to return.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">When this method returns, contains the total number of profiles.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.GetAllInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves user-profile data from the data source for profiles in which the last activity date occurred on or before the specified date.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information about the inactive profiles.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  of a user profile occurs on or before this date and time, the profile is considered inactive.</param><param name="pageIndex">The index of the page of results to return.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">When this method returns, contains the total number of profiles.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.FindProfilesByUserName(System.Web.Profile.ProfileAuthenticationOption,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves profile information for profiles in which the user name matches the specified user names.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information for profiles where the user name matches the supplied <paramref name="usernameToMatch"/> parameter.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="usernameToMatch">The user name to search for.</param><param name="pageIndex">The index of the page of results to return.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">When this method returns, contains the total number of profiles.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Profile.ProfileProvider.FindInactiveProfilesByUserName(System.Web.Profile.ProfileAuthenticationOption,System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves profile information for profiles in which the last activity date occurred on or before the specified date and the user name matches the specified user name.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user profile information for inactive profiles where the user name matches the supplied <paramref name="usernameToMatch"/> parameter.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="usernameToMatch">The user name to search for.</param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/> value of a user profile occurs on or before this date and time, the profile is considered inactive.</param><param name="pageIndex">The index of the page of results to return.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">When this method returns, contains the total number of profiles.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Profile.ProfileProvider.ApplicationName">
            <summary>
            Gets or sets the name of the currently running application.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the application's shortened name, which does not contain a full path or extension, for example, SimpleAppSettings.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.IMembershipAccount">
            <summary>
            Account information for a user 
            </summary>
            <remarks>
            <para>
            Note that all fields are get/set. The motivation is that this interface (or any implementation) should not be considered
            as a first class citizen, but as a DTO. It's solely purpose it to be able to fetch/store information
            in any datasource in a simple way (just implement this class and the repository interface). It should not be used
            for anything else.
            </para>
            <para>Breaking change: The ID field has been replaced with a "ProviderUserKey" field.</para>
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.ApplicationName">
            <summary>
            Gets or sets application that the user belongs to
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.Email">
            <summary>
            Gets or sets email address
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.PasswordQuestion">
            <summary>
            Gets or sets password question that must be answered to reset password
            </summary>
            <remarks>
            Controlled by the <see cref="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.IsPasswordQuestionRequired"/> property.
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.PasswordAnswer">
            <summary>
            Gets or sets answer for the <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.PasswordQuestion"/>.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.Comment">
            <summary>
            Gets or sets a comment about the user.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.LastLoginAt">
            <summary>
            Gets or sets date/time when the user logged in last.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.IsApproved">
            <summary>
            Gets or sets whether a new user have been approved and may login.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.LastPasswordChangeAt">
            <summary>
            Gets or sets when the password were changed last time.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.IsLockedOut">
            <summary>
            Gets or sets if the account has been locked (the user may not login)
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.IsOnline">
            <summary>
            Gets or sets if the user is online
            </summary>
            <remarks>
            Caluclated with the help of <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.LastActivityAt"/>.
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.LastLockedOutAt">
            <summary>
            Gets or sets when the user was locked out.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.FailedPasswordWindowStartedAt">
            <summary>
            Gets or sets when the user entered an incorrect password for the first time
            </summary>
            <value>
            DateTime.MinValue if the user has not entered an incorrect password (or succeded to login again).
            </value>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.FailedPasswordWindowAttemptCount">
            <summary>
            Gets or sets number of login attempts since <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.FailedPasswordWindowStartedAt"/>.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.FailedPasswordAnswerWindowStartedAt">
            <summary>
            Gets or sets when the user answered the password question incorrect for the first time.
            </summary>
            <value>
            DateTime.MinValue if the user has not entered an incorrect answer (or succeded to login again).
            </value>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.FailedPasswordAnswerWindowAttemptCount">
            <summary>
            Gets or sets number of times that the user have answered the password question incorrectly since <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.FailedPasswordAnswerWindowAttemptCount"/>
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.CreatedAt">
            <summary>
            Gets or sets when the user account was created.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.LastActivityAt">
            <summary>
            Gets or sets date/time when the user did something on the site
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.ProviderUserKey">
            <summary>
            Gets or sets ID identifying the user
            </summary>
            <remarks>
            Should be an id in your system (for instance in your database)
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.UserName">
            <summary>
            Gets or sets username
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.Password">
            <summary>
            Gets or sets password
            </summary>
            <remarks>The state of the password depends on the <seealso cref="T:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy"/> that is used.</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.PasswordSalt">
            <summary>
            Gets or sets the salt if a hashing strategy is used for the password.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider">
            <summary>
              Virtual path provider used to provide resources for Griffin framework
            </summary>
            <remarks>
            <para>
            You can easily use embedded views (using class libraries for Controllers &amp; Views) by configuration MVC like this:
            <example>
            <code>
            // you can assign a custom WebViewPage or a custom layout.
            var fixer = new EmbeddedViewFixer(); 
            var provider = new EmbeddedViewFileProvider(fixer);
            
            // Specify the assenmbly to use and the root namespace of your class library
            provider.Add(new NamespaceMapping(typeof (Areas.Griffin.GriffinAreaRegistration).Assembly, "Griffin.MvcContrib"));
            
            // register the embedded view provider. You can also point on the view files directly in the file system,
            // which is great during development (since you can change the views on the fly)
            GriffinVirtualPathProvider.Current.Add(provider);
            HostingEnvironment.RegisterVirtualPathProvider(GriffinVirtualPathProvider.Current);
            </code>
            </example>
            </para>
            </remarks>
            <seealso cref="T:Griffin.MvcContrib.VirtualPathProvider.IExternalViewFixer"/>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider.Add(Griffin.MvcContrib.VirtualPathProvider.IViewFileProvider)">
            <summary>
              Add a new file provider
            </summary>
            <param name="fileProvider"> </param>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider.FileExists(System.String)">
            <summary>
              Gets a value that indicates whether a file exists in the virtual file system.
            </summary>
            <param name="virtualPath"> The path to the virtual file. </param>
            <returns> true if the file exists in the virtual file system; otherwise, false. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
              Creates a cache dependency based on the specified virtual paths.
            </summary>
            <param name="virtualPath"> The path to the primary virtual resource. </param>
            <param name="virtualPathDependencies"> An array of paths to other resources required by the primary virtual resource. </param>
            <param name="utcStart"> The UTC time at which the virtual resources were read. </param>
            <returns> A <see cref="T:System.Web.Caching.CacheDependency" /> object for the specified virtual resources. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider.GetCacheKey(System.String)">
            <summary>
              Returns a cache key to use for the specified virtual path.
            </summary>
            <param name="virtualPath"> The path to the virtual resource. </param>
            <returns> A cache key for the specified virtual resource. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider.GetFile(System.String)">
            <summary>
              Gets a virtual file from the virtual file system.
            </summary>
            <param name="virtualPath"> The path to the virtual file. </param>
            <returns> A descendent of the <see cref="T:System.Web.Hosting.VirtualFile" /> class that represents a file in the virtual file system. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
            <summary>
              Returns a hash of the specified virtual paths.
            </summary>
            <param name="virtualPath"> The path to the primary virtual resource. </param>
            <param name="virtualPathDependencies"> An array of paths to other virtual resources required by the primary virtual resource. </param>
            <returns> A hash of the specified virtual paths. </returns>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider.Current">
            <summary>
              Gets singleton
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.NamespaceDoc">
            <summary>
            All classes used to handle translations for validation messages and models
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.ITypePromptImporter">
            <summary>
            Used to import prompts from an external source.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ITypePromptImporter.Import(System.Collections.Generic.IEnumerable{Griffin.MvcContrib.Localization.Types.TypePrompt})">
            <summary>
            Import prompts into the repository.
            </summary>
            <param name="prompts">Prompts to import</param>
            <remarks>All prompts should overwrite any existing prompts.</remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Json.ModelResponse">
            <summary>
            Returns a model
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ModelResponse.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Json.ModelResponse"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Json.ModelResponse.Model">
            <summary>
            Gets or sets model
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Json.ModelResponse.ModelName">
            <summary>
            Gets or sets model
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Roles.IUserWithRoles">
            <summary>
            A user and it's roles
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Roles.IUserWithRoles.IsInRole(System.String)">
            <summary>
            Check if the user is a member of the specified role
            </summary>
            <param name="roleName">Role</param>
            <returns>true if user belongs to the role; otherwise false.</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Roles.IUserWithRoles.Roles">
            <summary>
            Gets a list of all roles that the user is a member of.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlExtensions">
            <summary>
            Extension methods for different SQL classes
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlExtensions.FromSqlDate(System.Data.IDataRecord,System.String)">
            <summary>
            convert a DateTime loaded from the database into a .NET datetime
            </summary>
            <param name="instance">Data record containing the field</param>
            <param name="name">Name of column</param>
            <returns>A proper date time</returns>
            <remarks>
            Used to convert null and SqlServers minvalue to DateTime.MinValue
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlExtensions.AddParameter(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Add a parameter to a command
            </summary>
            <param name="command">command instance</param>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlExtensions.SqlSafe(System.DateTime)">
            <summary>
            Always store DateTime.MinValue as 1754-01-01 to add support for SqlServer.
            </summary>
            <param name="instance">The instance.</param>
            <returns>SqlServer safe date time</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlExtensions.CreateCommand(System.Data.IDbConnection,System.String)">
            <summary>
            Create a command and assign it a SQL statement
            </summary>
            <param name="connnection">Connection creating the command</param>
            <param name="sql">SQL statement</param>
            <returns>Command</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository">
            <summary>
            SQL repository.
            </summary>
            <remarks>Uses a connection string named "sqlmembership" as default.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.#ctor(Griffin.MvcContrib.Providers.Membership.SqlRepository.ISqlAdapter)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository"/> class.
            </summary>
            <param name="sqlAdapter">Used to modify SQL to vendor specific statements.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.Register(Griffin.MvcContrib.Providers.Membership.IMembershipAccount)">
            <summary>
            Register a new account.
            </summary>
            <param name="account">Acount to register</param>
            <returns>Result indication</returns>
            <remarks>
            Implementations should set the <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.ProviderUserKey"/> property before returning.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.Get(System.String)">
            <summary>
            Fetch a user from the service.
            </summary>
            <param name="username">Unique user name</param>
            <returns>User if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.Update(Griffin.MvcContrib.Providers.Membership.IMembershipAccount)">
            <summary>
            Update an existing user.
            </summary>
            <param name="account">Account being updated.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.GetByProviderKey(System.Object)">
            <summary>
            Get a user by using the implementation specific (your) Id.
            </summary>
            <param name="id">User identity specific for each account repository implementation</param>
            <returns>User if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.GetUserNameByEmail(System.String)">
            <summary>
            Translate an email into a user name.
            </summary>
            <param name="email">Email to lookup</param>
            <returns>User name if the specified email was found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.Delete(System.String,System.Boolean)">
            <summary>
            Delete a user from the database.
            </summary>
            <param name="username">Unique user name</param>
            <param name="deleteAllRelatedData">Delete information from all other tables etc</param>
            <returns>true if was removed successfully; otherwise false.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.GetNumberOfUsersOnline">
            <summary>
            Get number of users that are online
            </summary>
            <returns>Number of online users</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.FindAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find all users
            </summary>
            <param name="pageIndex">zero based index</param>
            <param name="pageSize">Number of users per page</param>
            <param name="totalRecords">Total number of users</param>
            <returns>A collection of users or an empty collection if no users was found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.FindNewAccounts(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find new acounts that haven't been activated.
            </summary>
            <param name="pageIndex">zero based index</param>
            <param name="pageSize">Number of users per page</param>
            <param name="totalRecords">Total number of users</param>
            <returns>A collection of users or an empty collection if no users was found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.FindByUserName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find by searching for user name
            </summary>
            <param name="usernameToMatch">User name (or partial user name)</param>
            <param name="pageIndex">Zero based index</param>
            <param name="pageSize">Number of items per page</param>
            <param name="totalRecords">total number of records that partially matched the specified user name</param>
            <returns>A collection of users or an empty collection if no users was found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.FindByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Find by searching for the specified email
            </summary>
            <param name="emailToMatch">Number of users that have the specified email (no partial matches)</param>
            <param name="pageIndex">Zero based index</param>
            <param name="pageSize">Number of items per page</param>
            <param name="totalRecords">total number of records that matched the specified email</param>
            <returns>A collection of users or an empty collection if no users was found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.Create(System.Object,System.String,System.String,System.String)">
            <summary>
            Creates the specified provider user key.
            </summary>
            <param name="providerUserKey">The provider user key.</param>
            <param name="applicationName">Name of the application.</param>
            <param name="username">The username.</param>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.CreateAndOpenConnection">
            <summary>
            Breaks SRP, but nothing major since the whole provider can be mocked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.CreateAccount">
            <summary>
            Create a membership account implementation
            </summary>
            <returns>Created account</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.SqlAccountRepository.IsUniqueEmailRequired">
            <summary>
            Gets whether all users must have unique email addresses.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.ClearTextStrategy">
            <summary>
            Strategy that do nothing with the passwords.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.ClearTextStrategy.Encrypt(Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo)">
            <summary>
            Encrypt a password
            </summary>
            <param name="account">Account information used to encrypt password</param>
            <returns>
            encrypted password.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.ClearTextStrategy.Decrypt(System.String)">
            <summary>
            Decrypt a password
            </summary>
            <param name="password">Encrpted password</param>
            <returns>Decrypted password if decryption is possible; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.ClearTextStrategy.GeneratePassword(Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Generate a new password
            </summary>
            <param name="policy">Policy that should be used when generating a new password.</param>
            <returns>A password which is not encrypted.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.ClearTextStrategy.Compare(Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo,System.String)">
            <summary>
            Compare if the specified password matches the encrypted password
            </summary>
            <param name="account">Stored acount informagtion.</param>
            <param name="clearTextPassword">Password specified by user.</param>
            <returns>
            true if passwords match; otherwise null
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.ClearTextStrategy.IsValid(System.String,Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Checks if the specified password is valid
            </summary>
            <param name="password">Password being checked</param>
            <param name="passwordPolicy">Policy used to validate password.</param>
            <returns></returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.ClearTextStrategy.IsPasswordsDecryptable">
            <summary>
            Gets if passwords can be decrypted.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.ClearTextStrategy.PasswordFormat">
            <summary>
            Gets how passwords are stored in the database.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.ViewLocalizer">
            <summary>
              Uses a <see cref="T:Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository"/> to localize views.
            </summary>
            <remarks>
            <para>
            Localizes views for the <see cref="T:Griffin.MvcContrib.GriffinWebViewPage"/> class. Will also create empty prompts for
            all cultures with missing prompts.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewLocalizer.#ctor(Griffin.MvcContrib.Localization.Views.IViewLocalizationRepository)">
            <summary>
              Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Views.ViewLocalizer"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewLocalizer.Translate(System.Web.Routing.RouteData,System.String)">
            <summary>
            Translate a text prompt
            </summary>
            <param name="routeData">Used to lookup the view location</param>
            <param name="text">Text to translate</param>
            <returns>
            String if found; otherwise null.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewLocalizer.Translate(System.String,System.Web.Routing.RouteData,System.String)">
            <summary>
            Translate a text prompt
            </summary>
            <param name="viewPath">Virtual path to the view, so that we can identify layouts and request common prompts.</param>
            <param name="routeData">Used to lookup the view location</param>
            <param name="text">Text to translate</param>
            <returns>
            String if found; otherwise null.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewLocalizer.FormatMissingPrompt(System.String)">
            <summary>
            Format output for a missing prompt
            </summary>
            <param name="text">View text</param>
            <returns>Plain text if default culture; otherwise culture tagged text.</returns>
            <example>
            Default culture:
            <code>
            localizer.FormatMissingPrompt("Hello world"); // --> hello world
            </code>
            Another culture:
            <code>
            localizer.FormatMissingPrompt("Hello world"); // --> [sv-se: hello world]
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewLocalizer.LoadCommonPrompt(System.String)">
            <summary>
            Load a common prompt
            </summary>
            <param name="text">Text to translate</param>
            <returns>Translation if found; otherwise null</returns>
            <remarks>Used to avoid duplications of prompts.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewLocalizer.CloneDefaultCulture">
            <summary>
            Clone the default culture 
            </summary>
            <remarks>A translation for the current UI culture is missing. Clones the default culture into the current one</remarks>
            <seealso cref="T:Griffin.MvcContrib.Localization.DefaultUICulture"/>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.LocalizedAttribute">
            <summary>
            Uses a cookie and query string to turn into a language
            </summary>
            <remarks>
            Redirect to a page which has "?lang=XXX" in the query string to change language.
            </remarks>
            <example>
            <code>
            [Localized]
            public class BaseController : Controller
            {
            }
            
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Called by the ASP.NET MVC framework before the action method executes.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.IViewFileProvider">
            <summary>
            Provides view files to <see cref="T:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider"/>.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IViewFileProvider.FileExists(System.String)">
            <summary>
            Checks if a file exits
            </summary>
            <param name="virtualPath">Virtual path like "~/Views/Home/Index.cshtml"</param>
            <returns><c>true</c> if found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IViewFileProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            Creates a cache dependency based on the specified virtual paths
            </summary>
            <param name="virtualPath">Virtual path like "~/Views/Home/Index.cshtml"</param>
            <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource </param>
            <param name="utcStart">The UTC time at which the virtual resources were read </param>
            <returns>A CacheDependency if the file is found and caching should be used; <see cref="P:Griffin.MvcContrib.VirtualPathProvider.NoCache.Instance"/> if caching should be disabled for the file; <c>null</c> if file is not found.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IViewFileProvider.GetCacheKey(System.String)">
            <summary>
            Returns a cache key to use for the specified virtual path
            </summary>
            <param name="virtualPath">Virtual path like "~/Views/Home/Index.cshtml"</param>
            <returns>CacheDependency if found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IViewFileProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
            <summary>
            Get file hash.
            </summary>
            <param name="virtualPath">Virtual path like "~/Views/Home/Index.cshtml"</param>
            <param name="virtualPathDependencies">An array of paths to other virtual resources required by the primary virtual resource </param>
            <returns>a new hash each time the file have changed (if file is found); otherwise null</returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IViewFileProvider.GetFile(System.String)">
            <summary>
            Get the view
            </summary>
            <param name="virtualPath">Virtual path like "~/Views/Home/Index.cshtml"</param>
            <returns>File</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.RadioButtonGenerator">
            <summary>
            Generates radio buttons for different list
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.RadioButtonGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.Generators.RadioButtonGenerator"/> class.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.IdTitleFormatter">
            <summary>
            Maps to "Id" and "Title" properties
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.ReflectiveSelectItemFormatter">
            <summary>
            Uses reflection to format objects into select list items
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.ReflectiveSelectItemFormatter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.ReflectiveSelectItemFormatter"/> class.
            </summary>
            <param name="textPropertyName">Name of the text/title property.</param>
            <param name="valuePropertyName">Name of the value property.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Html.IdTitleFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.IdTitleFormatter"/> class.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFixer">
            <summary>
              Adds default usings, sets an inherits clause and specifies the layout name
            </summary>
            <remarks>
            Modifies embedded views so that they works like any other views. This includes the following
            <list type="bullet">
            <item>Include a <c>@model</c> directive if missing</item>
            <item>Add a <c>@inherits</c> directive</item>
            <item>Add any missing @using statements (MVC and ASP.NET dependencies)</item>
            <item>Specify which layout to use.</item>
            </list>
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.IExternalViewFixer">
            <summary>
            Used to correct external view files
            </summary>
            <remarks>The purpose of the class is to allow the external views to look exactly as regular views without @inherits or anything like that.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.IExternalViewFixer.CorrectView(System.String,System.IO.Stream)">
            <summary>
            Modify the view
            </summary>
            <param name="virtualPath">Path to view</param>
            <param name="stream">Stream containing the original view</param>
            <returns>Stream with modified contents</returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFixer.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFixer"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFixer.CorrectView(System.String,System.IO.Stream)">
            <summary>
              Modify the view
            </summary>
            <param name="virtualPath"> Path to view </param>
            <param name="stream"> Stream containing the original view </param>
            <returns> Stream with modified contents </returns>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFixer.WebViewPageClassName">
            <summary>
              Base view class to inherit.
            </summary>
            <example>
              <code>GriffinVirtualPathProvider.Current.LayoutPath = "Griffin.MvcContrib.GriffinWebViewPage";</code>
            </example>
            <value> Default is Griffin.MvcContrib.GriffinWebViewPage </value>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFixer.LayoutPath">
            <summary>
              Gets or sets relative path to the layout file to use
            </summary>
            <example>
              <code>GriffinVirtualPathProvider.Current.LayoutPath = "~/Views/Shared/_Layout.cshtml";</code>
            </example>
            <value> Default is "~/Views/Shared/_Layout.cshtml" </value>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ResourceStringProvider">
            <summary>
            Used to return strings from one or more StringTables.
            </summary>
            <example>
            <code>
            var provider = new ResourceStringProvider(MyLocalizedStrings.ResourceProvider);
            </code>
            </example>
            <remarks>
            <para>Model translations should have the following format: "ClassName_PropertyName", for example: "User_FirstName". All
            extra metadata should have the following format: "ClassName_PropertyName_MetadataName".</para>
            <para>
            Validation error messages should just be named as the attributes, but without the "Attribute" suffix. Example: "Required".
            </para>
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider">
            <summary>
            Used to be able to provide localized strings from any source.
            </summary>
            <seealso cref="T:Griffin.MvcContrib.Localization.Types.CommonPrompts"/>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider.GetModelString(System.Type,System.String)">
            <summary>
            Get a localized string for a model property
            </summary>
            <param name="model">Model being localized</param>
            <param name="propertyName">Property to get string for</param>
            <returns>Translated string if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider.GetModelString(System.Type,System.String,System.String)">
            <summary>
            Get a localized metadata for a model property
            </summary>
            <param name="model">Model being localized</param>
            <param name="propertyName">Property to get string for</param>
            <param name="metadataName">Valid names are: Watermark, Description, NullDisplayText, ShortDisplayText.</param>
            <returns>Translated string if found; otherwise null.</returns>
            <remarks>
            Look at <see cref="T:System.Web.Mvc.ModelMetadata"/> to know more about the meta data
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider.GetValidationString(System.Type)">
            <summary>
            Get a translated string for a validation attribute
            </summary>
            <param name="attributeType">Type of attribute</param>
            <returns>Translated validation message if found; otherwise null.</returns>
            <remarks>
            Used to get localized error messages for the DataAnnotation attributes. The returned string 
            should have the same format as the built in messages, such as "{0} is required.".
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider.GetValidationString(System.Type,System.Type,System.String)">
            <summary>
            Get a translated string for a validation attribute
            </summary>
            <param name="attributeType">Type of attribute</param>
            <param name="modelType">Your view model</param>
            <param name="propertyName">Property in your view model</param>
            <returns>Translated validation message if found; otherwise null.</returns>
            <remarks>
            Tries to get a validation string which is specific for a view model property.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider.GetEnumString(System.Type,System.String)">
            <summary>
            Gets a enum string
            </summary>
            <param name="enumType">Type of enum</param>
            <param name="name">Name of the value to translation for</param>
            <returns>Translated name if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.#ctor(System.Resources.ResourceManager[])">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.ResourceStringProvider"/> class.
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <example>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.GetModelString(System.Type,System.String)">
            <summary>
            Get a localized string for a model property
            </summary>
            <param name="model">Model being localized</param>
            <param name="propertyName">Property to get string for</param>
            <returns>Translated string</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.GetModelString(System.Type,System.String,System.String)">
            <summary>
            Get a localized metadata for a model property
            </summary>
            <param name="model">Model being localized</param>
            <param name="propertyName">Property to get string for</param>
            <param name="metadataName">Valid names are: Watermark, Description, NullDisplayText, ShortDisplayText.</param>
            <returns>Translated string</returns>
            <remarks>
            Look at <see cref="T:System.Web.Mvc.ModelMetadata"/> to know more about the meta data
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.GetValidationString(System.Type)">
            <summary>
            Get a translated string for a validation attribute
            </summary>
            <param name="attributeType">Type of attribute</param>
            <returns>Localized validation message</returns>
            <remarks>
            Used to get localized error messages for the DataAnnotation attributes. The returned string 
            should have the same format as the built in messages, such as "{0} is required.".
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.GetValidationString(System.Type,System.Type,System.String)">
            <summary>
            Get a translated string for a validation attribute
            </summary>
            <param name="attributeType">Type of attribute</param>
            <param name="modelType">Your view model</param>
            <param name="propertyName">Property in your view model</param>
            <returns>Translated validation message if found; otherwise null.</returns>
            <remarks>
            Tries to get a validation string which is specific for a view model property.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.GetEnumString(System.Type,System.String)">
            <summary>
            Gets a enum string
            </summary>
            <param name="enumType">Type of enum</param>
            <param name="name">Name of the value to translation for</param>
            <returns>Translated name</returns>
            <remarks>enums has the same format as models: EnumTypeName_ValueName</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.Format(System.Type,System.String,System.String[])">
            <summary>
            Format the model informaiton into a StringTable key.
            </summary>
            <param name="type">Model type</param>
            <param name="propertyName">Name of the property in the model</param>
            <param name="extras">Extras used during formatting</param>
            <returns>String Table key</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.Format(System.Type)">
            <summary>
            Format the attribute type information into a StringTable key
            </summary>
            <param name="attributeType">Attribute type</param>
            <returns>String Table key</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ResourceStringProvider.GetString(System.String)">
            <summary>
            Get a string from one of the string tables.
            </summary>
            <param name="name">String table item key</param>
            <returns>string if found; otherwise null.</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.MetadataLanguageProvider">
            <summary>
            Just returns specified meta data
            </summary>
            <remarks>Is used when nothing else have been configured.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.MetadataLanguageProvider.GetModelString(System.Type,System.String)">
            <summary>
            Get a localized string for a model property
            </summary>
            <param name="model">Model being localized</param>
            <param name="propertyName">Property to get string for</param>
            <returns>Translated string</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.MetadataLanguageProvider.GetModelString(System.Type,System.String,System.String)">
            <summary>
            Get a localized metadata for a model property
            </summary>
            <param name="model">Model being localized</param>
            <param name="propertyName">Property to get string for</param>
            <param name="metadataName">Valid names are: Watermark, Description, NullDisplayText, ShortDisplayText.</param>
            <returns>Translated string</returns>
            <remarks>
            Look at <see cref="T:System.Web.Mvc.ModelMetadata"/> to know more about the meta data
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.MetadataLanguageProvider.GetValidationString(System.Type)">
            <summary>
            Get a translated string for a validation attribute
            </summary>
            <param name="attributeType">Type of attribute</param>
            <returns>Localized validation message</returns>
            <remarks>
            Used to get localized error messages for the DataAnnotation attributes. The returned string 
            should have the same format as the built in messages, such as "{0} is required.".
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.MetadataLanguageProvider.GetValidationString(System.Type,System.Type,System.String)">
            <summary>
            Get a translated string for a validation attribute
            </summary>
            <param name="attributeType">Type of attribute</param>
            <param name="modelType">Your view model</param>
            <param name="propertyName">Property in your view model</param>
            <returns>Translated validation message if found; otherwise null.</returns>
            <remarks>
            Tries to get a validation string which is specific for a view model property.
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.MetadataLanguageProvider.GetEnumString(System.Type,System.String)">
            <summary>
            Gets a enum string
            </summary>
            <param name="enumType">Type of enum</param>
            <param name="name">Name of the value to translation for</param>
            <returns>Translated name</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.ValidationAttributeAdapterFactory">
            <summary>
            creates adapters for client side validation
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ValidationAttributeAdapterFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Types.ValidationAttributeAdapterFactory"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ValidationAttributeAdapterFactory.Map``1(Griffin.MvcContrib.Localization.Types.IValidationAttributeAdapterFactory)">
            <summary>
            Maps the specified factory.
            </summary>
            <typeparam name="T">Validation attribute to return rules for</typeparam>
            <param name="factory">The factory.</param>
            <remarks>Replaces any existing factories.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ValidationAttributeAdapterFactory.Create(System.ComponentModel.DataAnnotations.ValidationAttribute,System.String)">
            <summary>
            Create client validation rules for Data Annotation attributes.
            </summary>
            <param name="attribute">Attribute</param>
            <param name="errorMessage">Not formatted error message (should contain {0} etc}</param>
            <returns>A collection of rules (or an empty collection)</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ValidationAttributeAdapterFactory.MapDefaultRules">
            <summary>
            Map rules for the default attributes.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection">
            <summary>
            All prompts for a specific language
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection"/> class.
            </summary>
            <param name="culture">The culture that all prompts are for.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.Add(Griffin.MvcContrib.Localization.Types.TypePrompt)">
            <summary>
            Add a new prompt
            </summary>
            <param name="prompt">Found prompt</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.Translate(Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            Translate a prompt if found
            </summary>
            <param name="key">Prompt to translate</param>
            <returns>Translation if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.AddRange(System.Collections.Generic.IEnumerable{Griffin.MvcContrib.Localization.Types.TypePrompt})">
            <summary>
            Add a collection of prompts.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.Get(Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            Get a prompt
            </summary>
            <param name="id">Prompt id</param>
            <returns>prompt if found; otherwise null</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.Delete(Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            Delete prompt with the specified key
            </summary>
            <param name="key">key</param>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.FlatFile.TypePromptCollection.Culture">
            <summary>
            Gets culture that the prompt is for
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.IHtmlTagAdapter">
            <summary>
            Adapter invoked for everything but FORM elements.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.IHtmlTagAdapter.Process(Griffin.MvcContrib.Html.HtmlTagAdapterContext)">
            <summary>
            Process a tag
            </summary>
            <param name="context">Context with all html tag information</param>
        </member>
        <member name="T:Griffin.MvcContrib.Json.ClientRuleProvider">
            <summary>
            Generates a JSON string from all client validation rules
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Json.ClientRuleProvider.GetRules(System.Web.Mvc.ControllerContext,System.Object)">
            <summary>
            Get validation rules for an model
            </summary>
            <param name="controllerContext">Current controller context</param>
            <param name="model">Model to validate</param>
            <returns>Object which can be JSON serialized</returns>
            <remarks>Will only return rules which has not been fulfilled.</remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.IClientValidationRule">
            <summary>
            Interface for clint validation rules
            </summary>
            <remarks>Created so that we can decorate existing validation classes instead of having to create a lot of adapters.</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.IClientValidationRule.ErrorMessage">
            <summary>
            Gets complete error message (formatted)
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.IClientValidationRule.ValidationParameters">
            <summary>
            Gets or sets parameters required for the client validation rule
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.IClientValidationRule.ValidationType">
            <summary>
            Gets client validation rule (name of the jQuery rule)
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider">
            <summary>
              Provides view files from disk
            </summary>
            <remarks>
            <para>
            Using this provider lets you keep your view files in any folder. Combining this provider with the embedded provider is a great
            way to be able to change views during development (using the file provider) and then include the views from the DLL in production.
            </para>
            </remarks>
            <example>
            <code>
            var provider = new DiskFileLocator(new DiskProvider("/MyArea/", @"..\..\MyClassLibrary\Areas\MyArea\Views"));
            GriffinVirtualPathProvider.Current.Add(provider);
            HostingEnvironment.RegisterVirtualPathProvider(GriffinVirtualPathProvider.Current);
            </code>
            </example>
            <seealso cref="T:Griffin.MvcContrib.VirtualPathProvider.IViewFileLocator"/>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.#ctor(Griffin.MvcContrib.VirtualPathProvider.IViewFileLocator)">
            <summary>
              Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider"/> class.
            </summary>
            <param name="viewFileLocator"> The view file locator. </param>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.#ctor(Griffin.MvcContrib.VirtualPathProvider.IViewFileLocator,Griffin.MvcContrib.VirtualPathProvider.IExternalViewFixer)">
            <summary>
              Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider"/> class.
            </summary>
            <param name="viewFileLocator"> The view file locator. </param>
            <param name="viewFixer">Used to modify external views so that can be written as any other view.</param>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.FileExists(System.String)">
            <summary>
              Checks if a file exists in this provider
            </summary>
            <param name="virtualPath"> Path </param>
            <returns> Determines if a file exists in this provider </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
            Creates a cache dependency based on the specified virtual paths
            </summary>
            <param name="virtualPath">Virtual path like "~/Views/Home/Index.cshtml"</param>
            <param name="virtualPathDependencies">An array of paths to other resources required by the primary virtual resource</param>
            <param name="utcStart">The UTC time at which the virtual resources were read</param>
            <returns>
            CacheDependency if found; otherwise <c>false</c> .
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
            <summary>
            Get file hash.
            </summary>
            <param name="virtualPath">Virtual path like "~/Views/Home/Index.cshtml"</param>
            <param name="virtualPathDependencies">An array of paths to other virtual resources required by the primary virtual resource</param>
            <returns>
            a new hash each time the file have changed (if file is found); otherwise null
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.GetFile(System.String)">
            <summary>
              Get the view
            </summary>
            <param name="virtualPath"> Virtual path like "~/Views/Home/Index.cshtml" </param>
            <returns> File </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.GetCacheKey(System.String)">
            <summary>
            Returns a cache key to use for the specified virtual path
            </summary>
            <param name="virtualPath">Virtual path like "~/Views/Home/Index.cshtml"</param>
            <returns>CacheDependency if found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.CorrectView(System.String,System.IO.FileStream)">
            <summary>
            Used to adjust the external views before they are returned
            </summary>
            <param name="virtualPath">Path to requested view</param>
            <param name="fileStream">Loaded file</param>
            <returns>Stream to use</returns>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider.AllowedFileExtensions">
            <summary>
            Gets or sets file extensions (without a dot) that this provider can supply
            </summary>
            <value>Default is cshtml, ascx and aspx.</value>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider">
            <summary>
            Metadata provider used to localize models and their meta data.
            </summary>
            <remarks>
            <para>Check the namespace documentation for an example on how to use the provider.</para>
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider.#ctor(Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider"/> class.
            </summary>
            <param name="stringProvider">The string provider.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider"/> class.
            </summary>
            <remarks>you need to register <see cref="T:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider"/> in your IoC container.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
            <summary>
            Gets the metadata for the specified property.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="containerType">The type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">The type of the model.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>
            The metadata for the property.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider.Translate(System.Type,System.String)">
            <summary>
            Translate a string
            </summary>
            <param name="type">mode type</param>
            <param name="propertyName">Property name to translate</param>
            <returns>Translated string</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelMetadataProvider.Translate(System.Type,System.String,System.String)">
            <summary>
            Translate a string
            </summary>
            <param name="type">Model type</param>
            <param name="propertyName">Property name</param>
            <param name="metadataName">Meta data name</param>
            <returns>Translated string</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.LocalizedCacheAttribute">
            <summary>
            Make the cache language sensitive.
            </summary>
            <remarks>
            You need to add the following method you your global.asax:
            <code>
            public override string GetVaryByCustomString(HttpContext context, string custom)
            {
                string lang;
                return LocalizedCacheAttribute.GetVaryByCustomString(context, custom, out lang)
                           ? lang
                           : base.GetVaryByCustomString(context, custom);
            }
            </code>
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedCacheAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.LocalizedCacheAttribute"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedCacheAttribute.GetVaryByCustomString(System.Web.HttpContext,System.String,System.String@)">
            <summary>
            Method that determines if the cahing is OK or not
            </summary>
            <param name="context">Current HttpContext.</param>
            <param name="value">Value to vary by.</param>
            <param name="lang">The "vary" result to use.</param>
            <returns><c>true</c> if the vary request was handled; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.TypePromptKey">
            <summary>
            Type prompt key.
            </summary>
            <remarks>The key is only unique for the current language only. This is a requirement
            to be able to translate prompts between languages</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePromptKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Views.ViewPromptKey"/> class.
            </summary>
            <param name="fullTypeName">Type.FullName for the type getting localized.</param>
            <param name="name">Property name (and metadata name prefixed with underscore).</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePromptKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Views.ViewPromptKey"/> class.
            </summary>
            <param name="md5Hash">Already computed hash.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePromptKey.Equals(Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePromptKey.op_Equality(Griffin.MvcContrib.Localization.Types.TypePromptKey,Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            
            </summary>
            <param name="typePromptKey"></param>
            <param name="typePromptKey2"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePromptKey.op_Inequality(Griffin.MvcContrib.Localization.Types.TypePromptKey,Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            
            </summary>
            <param name="viewPromptKey"></param>
            <param name="viewPromptKey2"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePromptKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePromptKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePromptKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Griffin.MvcContrib.Plugins.IMenuWithChildren">
            <summary>
            A menu item which contains children
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.IMenuWithChildren.Add(Griffin.MvcContrib.Plugins.IMenuItem)">
            <summary>
            Add a new menu item
            </summary>
            <param name="menuItem">Item to add</param>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.IMenuWithChildren.Exists(System.String)">
            <summary>
            Checks if a child item exists
            </summary>
            <param name="childName">Name of item</param>
            <returns>true if found; otherwise false</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.IMenuWithChildren.Item(System.String)">
            <summary>
            Gets child menu item
            </summary>
            <param name="childName">Name of item</param>
            <returns>Item if found; otherwise null</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.SortDirection">
            <summary>
            How to sort items
            </summary>
        </member>
        <member name="F:Griffin.MvcContrib.Localization.Views.SortDirection.Ascending">
            <summary>
            ascending sort
            </summary>
        </member>
        <member name="F:Griffin.MvcContrib.Localization.Views.SortDirection.Descending">
            <summary>
            Descending sort
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidationMessages.DataAnnotationDefaultStrings">
            <summary>
            Loads the default DataAnnotation strings from the resource file System.ComponentModel.DataAnnotations.Resources.DataAnnotationsResources
            </summary>
            <remarks>Do note that resource files can fallback to default culture (and therefore return the incorrect language)</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.DataAnnotationDefaultStrings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.DataAnnotationDefaultStrings.GetPrompts(System.Globalization.CultureInfo)">
            <summary>
              Get all strings.
            </summary>
            <param name="culture">Culture to get prompts for</param>
            <returns>A colleciton of prompts (or an empty collection)</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.DataAnnotationDefaultStrings.GetString(System.Type,System.Globalization.CultureInfo)">
            <summary>
            Get the localized text
            </summary>
            <param name="type">Validation attribute type.</param>
            <param name="culture">Culture to get for </param>
            <returns>Text if found; otherwise null</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Json.SimpleMessage">
            <summary>
            Send back a simple message and let the handler decide what to do with it
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Json.SimpleMessage.Value">
            <summary>
            Gets or sets the message
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.IdNameFormatter">
            <summary>
            Maps to "Id" and "Name" properties
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.IdNameFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Html.IdNameFormatter"/> class.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider">
            <summary>
            Used to provide embedded files (other than views).
            </summary>
            <remarks>Can be used to provide embedded content files such as images, scripts etc.</remarks>
            <seealso cref="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFileProvider"/>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider"/> class.
            </summary>
            <param name="siteRoot">Root directory of the web site</param>
            <example>
            <code>
            var embeddedProvider = new EmbeddedFileProvider(VirtualPathUtility.ToAbsolute("~/"));
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.FileExists(System.String)">
            <summary>
              Checks if a file exits
            </summary>
            <param name="virtualPath"> Virtual path like "~/Views/Home/Index.cshtml" </param>
            <returns> <c>true</c> if found; otherwise <c>false</c> . </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)">
            <summary>
              Creates a cache dependency based on the specified virtual paths
            </summary>
            <param name="virtualPath"> Virtual path like "~/Views/Home/Index.cshtml" </param>
            <param name="dependencies"> The dependencies. </param>
            <param name="utcStart"> The UTC start. </param>
            <returns> A CacheDependency if the file is found and caching should be used; <see cref="P:Griffin.MvcContrib.VirtualPathProvider.NoCache.Instance"/> if caching should be disabled for the file; <c>null</c> if file is not found. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.GetCacheKey(System.String)">
            <summary>
            </summary>
            <param name="virtualPath"> Virtual path like "~/Views/Home/Index.cshtml" </param>
            <returns> CacheDependency if found; otherwise <c>false</c> . </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.GetFileHash(System.String,System.Collections.IEnumerable)">
            <summary>
              Get file hash.
            </summary>
            <param name="virtualPath"> Virtual path like "~/Views/Home/Index.cshtml" </param>
            <param name="dependencies"> The dependencies. </param>
            <returns> a new hash each time the file have changed (if file is found); otherwise null </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.GetFile(System.String)">
            <summary>
              Get the view
            </summary>
            <param name="virtualPath"> Virtual path like "~/Views/Home/Index.cshtml" </param>
            <returns> File </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.LoadStream(System.String,Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.MappedResource)">
            <summary>
            Resource to load
            </summary>
            <param name="virtualPath">Requested virtual path</param>
            <param name="resource">Identified resource (i.e. the one to load)</param>
            <returns>Stream that can be returned to the Virtual Path Provider.</returns>
            <remarks>The default implementation uses <c>resource.Assembly.GetManifestResourceStream(resource.FullResourceName)</c></remarks>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.Add(Griffin.MvcContrib.VirtualPathProvider.NamespaceMapping)">
            <summary>
              Add a namespace mapping for embedded resources.
            </summary>
            <param name="mapping"> Mapping to add </param>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.GetResource(System.String)">
            <summary>
              Get resource name by scanning all mapped namespaces.
            </summary>
            <param name="uri"> Uri to search for. </param>
            <returns> Full resource name if found; otherwise null. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.Map(Griffin.MvcContrib.VirtualPathProvider.NamespaceMapping)">
            <summary>
            Create mappings for all resources in a specific namespace (and all sub namespaces).
            </summary>
            <param name="mapping">Mapping to load embedded resources in</param>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.IsFileAllowed(System.String)">
            <summary>
            determins if the found embedded file might be mapped and provided.
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
            <remarks>Default implementation uses <see cref="P:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.AllowedFileExtensions"/> to determine which files to servce.</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.AllowedFileExtensions">
            <summary>
            Gets or sets file extensions that may be served.
            </summary>
            <remarks>Default extensions: <code>new[] {"png", "jpg", "jpeg", "gif", "css", "coffee", "js"}</code></remarks>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.EmbeddedFile.Open">
            <summary>
              When overridden in a derived class, returns a read-only stream to the virtual resource.
            </summary>
            <returns> A read-only stream to the virtual file. </returns>
        </member>
        <member name="T:Griffin.MvcContrib.Plugins.RoutedMenuItem">
            <summary>
              Menu item which uses ASP.NET Routes
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.RoutedMenuItem.#ctor(System.String,System.String,System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Plugins.RoutedMenuItem"/> class.
            </summary>
            <param name="name"> Name (HTML id). </param>
            <param name="title"> Title shown for user. </param>
            <param name="route"> The route. </param>
            <example>
              <code>mainMenu.Add(new RoutedMenuItem("mnuUsers", "List users", new { controller = "User", action = "Index" });</code>
            </example>
            <remarks>
              Add the route item "area" for area routes
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.RoutedMenuItem.CreateUri(System.Web.Mvc.UrlHelper)">
            <summary>
              Creates the uri which should be visited when the item is clicked
            </summary>
            <param name="helper"> Uri helper (to be able to generate absolute uris) </param>
            <returns> Created URI </returns>
            <remarks>
              Add the route item "area" for area routes
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.RoutedMenuItem.GetEnumerator">
            <summary>
              Gets the enumerator.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.RoutedMenuItem.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.RoutedMenuItem.Add(Griffin.MvcContrib.Plugins.IMenuItem)">
            <summary>
              Add a new menu item
            </summary>
            <param name="menuItem"> Item to add </param>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.RoutedMenuItem.Exists(System.String)">
            <summary>
              Checks if a child item exists
            </summary>
            <param name="childName"> Name of item </param>
            <returns> true if found; otherwise false </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.RoutedMenuItem.Title">
            <summary>
              Gets title to display
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.RoutedMenuItem.Name">
            <summary>
              Gets name (used as HTML id)
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.RoutedMenuItem.IsVisible">
            <summary>
            Gets if the item is visible (user have the correct role)
            </summary>
            <returns>true if user has the correct role; otherwise false.</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.RoutedMenuItem.RoleName">
            <summary>
            Gets or sets the role that the user must have.
            </summary>
            <remarks>Set as <c>null</c> to disable role checking</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Plugins.RoutedMenuItem.Item(System.String)">
            <summary>
              Gets the <see cref="T:Griffin.MvcContrib.Plugins.IMenuItem"/> with the specified child name.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.NamespaceDoc">
            <summary>
            A more SOLID membership provider
            </summary>
            <remarks>Read more here: http://blog.gauffin.org/2011/09/a-more-structured-membershipprovider/
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.DelegateValidationAttributeAdapterFactory">
            <summary>
            Uses a delegate to create the client validation rules.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.DelegateValidationAttributeAdapterFactory.#ctor(System.Func{System.ComponentModel.DataAnnotations.ValidationAttribute,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.ModelClientValidationRule}})">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Types.DelegateValidationAttributeAdapterFactory"/> class.
            </summary>
            <param name="factory">Takes attribute + error Message and returns client rules.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.DelegateValidationAttributeAdapterFactory.Create(System.ComponentModel.DataAnnotations.ValidationAttribute,System.String)">
            <summary>
            Generate client rules for a validation attribute
            </summary>
            <param name="attribute">Attribute to get rules for</param>
            <param name="errorMessage">Message to display</param>
            <returns>Validation rules</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.IViewPromptImporter">
            <summary>
            Can import view prompts from an external source
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewPromptImporter.Import(System.Collections.Generic.IEnumerable{Griffin.MvcContrib.Localization.Views.ViewPrompt})">
            <summary>
            Imports a collection of view prompts into the data source
            </summary>
            <param name="viewPrompts">Collection of prompts to import</param>
            <remarks>All existing view prompts should be replaced with those that are being defined
            in the list.</remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider">
            <summary>
              Used to get default validation messages
            </summary>
            <remarks>
              Current implementation haxx0r ASP.NET MVC3 to get the hidden resource strings. this also means that it might not work with other implementations like Mono
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider.Assign(Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider)">
            <summary>
              Assign a new custom provider.
            </summary>
            <param name="provider"> </param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider.GetPrompts(System.Globalization.CultureInfo)">
            <summary>
              Get all strings.
            </summary>
            <param name="culture">Culture to get prompts for</param>
            <returns>A colleciton of prompts (or an empty collection)</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider.GetString(System.Type,System.Globalization.CultureInfo)">
            <summary>
            Get the localized text
            </summary>
            <param name="type">Validation attribute type.</param>
            <param name="culture">Culture to get for </param>
            <returns>Text if found; otherwise null</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.ValidationAttributesStringProvider.Current">
            <summary>
              Gets current implementation
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy">
            <summary>
            Encrypts the password by using triple des.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.#ctor(System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy"/> class.
            </summary>
            <param name="passphrase">The passphrase used to encrypt/decrypt passwords.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.Encrypt(Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo)">
            <summary>
            Encrypt a password
            </summary>
            <param name="account">Account information used to encrypt password</param>
            <returns>
            encrypted password.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.Decrypt(System.String)">
            <summary>
            Decrypt a password
            </summary>
            <param name="password">Encrpted password</param>
            <returns>Decrypted password if decryption is possible; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.GeneratePassword(Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Generate a new password
            </summary>
            <param name="policy">Policy that should be used when generating a new password.</param>
            <returns>A password which is not encrypted.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.Compare(Griffin.MvcContrib.Providers.Membership.AccountPasswordInfo,System.String)">
            <summary>
            Compare if the specified password matches the encrypted password
            </summary>
            <param name="account">Stored acount informagtion.</param>
            <param name="clearTextPassword">Password specified by user.</param>
            <returns>
            true if passwords match; otherwise null
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.IsValid(System.String,Griffin.MvcContrib.Providers.Membership.IPasswordPolicy)">
            <summary>
            Checks if the specified password is valid
            </summary>
            <param name="password">Password being checked</param>
            <param name="passwordPolicy">Policy used to validate password.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.EncryptString(System.String,System.String)">
            <summary>
            Encrypts a string.
            </summary>
            <param name="password">The password.</param>
            <param name="passphrase">The passphrase.</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.DecryptString(System.String,System.String)">
            <summary>
            Decrypts a string.
            </summary>
            <param name="password">The password.</param>
            <param name="passphrase">The passphrase.</param>
            <returns>Decrypted string</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.IsPasswordsDecryptable">
            <summary>
            Gets if passwords can be decrypted.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.PasswordStrategies.TripleDesStrategy.PasswordFormat">
            <summary>
            Gets how passwords are stored in the database.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.PasswordExtensions">
            <summary>
            Extension methods for <seealso cref="T:Griffin.MvcContrib.Providers.Membership.IMembershipAccount"/>
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.PasswordExtensions.CreatePasswordInfo(Griffin.MvcContrib.Providers.Membership.IMembershipAccount)">
            <summary>
            Create a new password info class.
            </summary>
            <param name="account">Account containing password information</param>
            <returns>Password info object</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.ViewPrompt">
            <summary>
            A text that should be translated
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPrompt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Views.ViewPrompt"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPrompt.#ctor(System.Int32,Griffin.MvcContrib.Localization.Views.ViewPrompt)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Views.ViewPrompt"/> class.
            </summary>
            <param name="localeId">New language</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.ViewPrompt.Equals(Griffin.MvcContrib.Localization.Views.ViewPrompt)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.ViewPrompt.LocaleId">
            <summary>
            Gets or sets locale id (refer to MSDN)
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.ViewPrompt.ViewPath">
            <summary>
            Gets or sets view path, typically <see cref="P:System.Uri.AbsolutePath"/>
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.ViewPrompt.TextName">
            <summary>
            Gets or sets the text to translate
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.ViewPrompt.TranslatedText">
            <summary>
            Gets or sets translated text
            </summary>
            <value>Empty string if not translated</value>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.ViewPrompt.Key">
            <summary>
            Gets a key for the prompt.
            </summary>
            <remarks>The key must be unique in the current language but should be the
            same for all different languages.</remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.CheckBoxGenerator">
            <summary>
            Generates checkboxes
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.IViewPromptResult">
            <summary>
            Query result
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.IViewPromptResult.Items">
            <summary>
            Get matching items
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.IViewPromptResult.TotalCount">
            <summary>
            Gets total count (useful when paging is used)
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.IViewPromptQueries">
            <summary>
            Queries used to find view texts
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewPromptQueries.FindText(System.Globalization.CultureInfo,System.String,Griffin.MvcContrib.Localization.Views.QueryConstraints)">
            <summary>
            Find items
            </summary>
            <param name="culture">Culture to get prompsts for</param>
            <param name="text">Search view path and name after this string</param>
            <param name="constraints">Used to limit the search result</param>
            <returns>Matching items</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewPromptQueries.FindAll(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Views.QueryConstraints)">
            <summary>
            Find items
            </summary>
            <param name="culture">Culture to get prompsts for</param>
            <param name="constraints">Used to limit the search result</param>
            <returns>Matching items</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.IViewPromptQueries.FindNotTranslated(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Views.QueryConstraints)">
            <summary>
            Find items which has not been translated into the specified language
            </summary>
            <param name="culture">Culture to get prompsts for</param>
            <param name="constraints">Used to limit the search result</param>
            <returns>Matching items</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidationMessages.NamespaceDoc">
            <summary>
            Provides localized strings for validation attributes. 
            </summary>
            <remarks>Do note that the string returned should in most cases contain formatters (<c>{0}</c> strings) so that the
            string can be formatted by the attribute.
            <para>Register your own providers in the <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.ValidationMessageProviders"/></para>
            </remarks>
            <seealso cref="T:Griffin.MvcContrib.Localization.ValidationMessages.ValidationMessageProviders"/>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.ValidationMessages.GriffinStringsProvider">
            <summary>
            Uses <see cref="T:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider"/> to find attribute translations.
            </summary>
            <remarks>Uses the <see cref="T:System.Web.Mvc.DependencyResolver"/> to find the localized string provider.</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.GriffinStringsProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.GriffinStringsProvider"/> class.
            </summary>
            <remarks>Use this constructor if you are using IoC (it will fetch the provider using <c>DependencyResolver</c>)</remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.GriffinStringsProvider.#ctor(Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.GriffinStringsProvider"/> class.
            </summary>
            <param name="stringProvider">The string provider.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.GriffinStringsProvider.GetStringProvider">
            <summary>
            Gets the string provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.ValidationMessages.GriffinStringsProvider.GetMessage(Griffin.MvcContrib.Localization.ValidationMessages.IGetMessageContext)">
            <summary>
            Get a validation message
            </summary>
            <param name="context"></param>
            <returns>
            String if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.MembershipProvider">
            <summary>
            A membership provider which uses different components to make it more SOLID.
            </summary>
            <remarks>
            You need to register the services listed under "See also" in your inversion of control container. This provider
            uses <see cref="T:System.Web.Mvc.DependencyResolver"/> to find all dependencies.
            </remarks>
            <seealso cref="T:Griffin.MvcContrib.Providers.Membership.IAccountRepository"/>
            <seealso cref="T:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy"/>
            <seealso cref="T:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy"/>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Adds a new membership user to the data source.
            </summary>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the information for the newly created user.
            </returns>
            <param name="username">The user name for the new user. </param><param name="password">The password for the new user. </param><param name="email">The e-mail address for the new user.</param><param name="passwordQuestion">The password question for the new user.</param><param name="passwordAnswer">The password answer for the new user</param><param name="isApproved">Whether or not the new user is approved to be validated.</param><param name="providerUserKey">The unique identifier from the membership data source for the user.</param><param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"/> enumeration value indicating whether the user was created successfully.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.CloneUser(Griffin.MvcContrib.Providers.Membership.IMembershipAccount)">
            <summary>
            Create a membershipuser from an membership account.
            </summary>
            <param name="account">The account.</param>
            <returns>Created user</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
            <param name="username">The user to change the password question and answer for. </param><param name="password">The password for the specified user. </param><param name="newPasswordQuestion">The new password question for the specified user. </param><param name="newPasswordAnswer">The new password answer for the specified user. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source.
            </summary>
            <returns>
            The password for the specified user name.
            </returns>
            <param name="username">The user to retrieve the password for. </param><param name="answer">The password answer for the user. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
            <param name="username">The user to update the password for. </param><param name="oldPassword">The current password for the specified user. </param><param name="newPassword">The new password for the specified user. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <returns>
            The new password for the specified user.
            </returns>
            <param name="username">The user to reset the password for. </param><param name="answer">The password answer for the specified user. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates information about a user in the data source.
            </summary>
            <param name="user">A <see cref="T:System.Web.Security.MembershipUser"/> object that represents the user to update and the updated information for the user. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the specified user name and password exist in the data source.
            </summary>
            <returns>
            true if the specified username and password are valid; otherwise, false.
            </returns>
            <param name="username">The name of the user to validate. </param><param name="password">The password for the specified user. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.UnlockUser(System.String)">
            <summary>
            Clears a lock so that the membership user can be validated.
            </summary>
            <returns>
            true if the membership user was successfully unlocked; otherwise, false.
            </returns>
            <param name="userName">The membership user whose lock status you want to clear.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets user information from the data source based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the specified user's information from the data source.
            </returns>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param><param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the specified user's information from the data source.
            </returns>
            <param name="username">The name of the user to get information for. </param><param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
            <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
            <param name="email">The e-mail address to search for. </param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source. 
            </summary>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
            <param name="username">The name of the user to delete.</param><param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in the data source in pages of data.
            </summary>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">The total number of matched users.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Gets the number of users currently accessing the application.
            </summary>
            <returns>
            The number of users currently accessing the application.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
            <param name="usernameToMatch">The user name to search for.</param><param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">The total number of matched users.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Providers.Membership.MembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
            <param name="emailToMatch">The e-mail address to search for.</param><param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">The total number of matched users.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.Description">
            <summary>
            Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).
            </summary>
            <returns>A brief, friendly description suitable for display in administrative tools or other UIs.</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.EnablePasswordRetrieval">
            <summary>
            Indicates whether the membership provider is configured to allow users to retrieve their passwords.
            </summary>
            <returns>
            true if the membership provider is configured to support password retrieval; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.EnablePasswordReset">
            <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
            <returns>
            true if the membership provider supports password reset; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
            <returns>
            true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.ApplicationName">
            <summary>
            The name of the application using the custom membership provider.
            </summary>
            <returns>
            The name of the application using the custom membership provider.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <returns>
            The number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
            <returns>
            The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
            <returns>
            true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.PasswordFormat">
            <summary>
            Gets a value indicating the format for storing passwords in the membership data store.
            </summary>
            <returns>
            One of the <see cref="T:System.Web.Security.MembershipPasswordFormat"/> values indicating the format for storing passwords in the data store.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
            <returns>
            The minimum length required for a password. 
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <returns>
            The minimum number of special characters that must be present in a valid password.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <returns>
            A regular expression used to evaluate a password.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.AccountRepository">
            <summary>
            Gets the repository
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.PasswordStrategy">
            <summary>
            Gets password strategy
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.MembershipProvider.PasswordPolicy">
            <summary>
            Gets password policy
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Logging.LogProvider">
            <summary>
            Used to enable logging in the framework
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.LogProvider.GetLogger``1">
            <summary>
            Get a logger for the specified type
            </summary>
            <typeparam name="T">Type of class that want's to log information</typeparam>
            <returns>A logger</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.LogProvider.UseDebugWindow">
            <summary>
            Log to the VStudio debug window
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Logging.LogProvider.Current">
            <summary>
            Gets current log provider
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider">
            <summary>
            Uses a <see cref="T:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository"/> to find all strings
            </summary>
            <remarks>
            <para>
            Set the <see cref="T:Griffin.MvcContrib.Localization.DefaultUICulture"/>. It's used to determine if the provider should indicate that
            a translation is missing.
            </para>
            <para>
            Use <see cref="T:Griffin.MvcContrib.Localization.Types.CommonPrompts"/> as the requested type to handle translations that are common for many objects.
            </para>
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider.#ctor(Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider"/> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider.GetModelString(System.Type,System.String)">
            <summary>
            Get a localized string for a model property
            </summary>
            <param name="model">Model being localized</param>
            <param name="propertyName">Property to get string for</param>
            <returns>Translated string if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider.GetModelString(System.Type,System.String,System.String)">
            <summary>
            Get a localized metadata for a model property
            </summary>
            <param name="model">Model being localized</param>
            <param name="propertyName">Property to get string for</param>
            <param name="metadataName">Valid names are: Watermark, Description, NullDisplayText, ShortDisplayText.</param>
            <returns>Translated string if found; otherwise null.</returns>
            <remarks>
            Look at <see cref="T:System.Web.Mvc.ModelMetadata"/> to know more about the meta data
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider.GetValidationString(System.Type)">
            <summary>
            Get a translated string for a validation attribute
            </summary>
            <param name="attributeType">Type of attribute</param>
            <returns>Translated validtion message if found; otherwise null.</returns>
            <remarks>
            Used to get localized error messages for the DataAnnotation attributes. The returned string 
            should have the same format as the built in messages, such as "{0} is required.".
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider.GetValidationString(System.Type,System.Type,System.String)">
            <summary>
            Get a translated string for a validation attribute
            </summary>
            <param name="attributeType">Type of attribute</param>
            <param name="modelType">Your view model</param>
            <param name="propertyName">Property in your view model</param>
            <returns>
            Translated validation message if found; otherwise null.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider.GetEnumString(System.Type,System.String)">
            <summary>
            Gets a enum string
            </summary>
            <param name="enumType">Type of enum</param>
            <param name="name">Name of the value to translation for</param>
            <returns>Translated name if found; otherwise null.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.RepositoryStringProvider.Translate(System.Type,System.String)">
            <summary>
            Translate a string
            </summary>
            <param name="type">Model being translated</param>
            <param name="name">Property name (or <c>propertyName_metadataName</c>)</param>
            <returns></returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository">
            <summary>
            Repository used to provide localization strings for different types such as validation attributes and models.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository.GetPrompts(System.Globalization.CultureInfo,System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.SearchFilter)">
            <summary>
            Get all prompts
            </summary>
            <param name="cultureInfo">Culture to get prompts for</param>
            <param name="templateCulture">Culture used as template to be able to include all non-translated prompts</param>
            <param name="filter">Filter to limit the search result </param>
            <returns>
            Collection of translations
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository.CreateLanguage(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Create translation for a new language
            </summary>
            <param name="culture">Language to create</param>
            <param name="templateCulture">Language to use as a template</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository.GetPrompt(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            Get a specific prompt
            </summary>
            <param name="culture">Culture to get prompt for</param>
            <param name="key">Key which is unique in the current language</param>
            <returns>Prompt if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository.Save(System.Globalization.CultureInfo,System.Type,System.String,System.String)">
            <summary>
            Create  or update a prompt
            </summary>
            <param name="culture">Culture that the prompt is for</param>
            <param name="type">Type being localized</param>
            <param name="name">Property name and any additonal names (such as metadata name, use underscore as delimiter)</param>
            <param name="translatedText">Translated text string</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository.Save(System.Globalization.CultureInfo,System.String,System.String,System.String)">
            <summary>
            Create  or update a prompt
            </summary>
            <param name="culture">Culture that the prompt is for</param>
            <param name="fullTypeName">Type.FullName for the type being localized</param>
            <param name="name">Property name and any additonal names (such as metadata name, use underscore as delimiter)</param>
            <param name="translatedText">Translated text string</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository.GetAvailableLanguages">
            <summary>
            Get all languages that got partial or full translations.
            </summary>
            <returns>Cultures corresponding to the translations</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository.Update(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Types.TypePromptKey,System.String)">
            <summary>
            Update an existing prompt
            </summary>
            <param name="cultureInfo">Culture to update prompt in</param>
            <param name="key">Generated key for prompt, unique in the specified language only</param>
            <param name="translatedText">New translated text</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.ILocalizedTypesRepository.Delete(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            Delete a prompt.
            </summary>
            <param name="culture">Culture to delete prompt in</param>
            <param name="key">Prompt key</param>
        </member>
        <member name="T:Griffin.MvcContrib.Plugins.NamespaceDoc">
            <summary>
            This framework can be used to create a plugin system for ASP.NET MVC3 together with an inversion of control container.
            </summary>
            <remarks>
            <para>
            Convience over configuration framework for plugins. You have to use a folder structure similar to:
            <code>
            ProjectName\Plugins\
            ProjectName\Plugins\PluginName
            ProjectName\Plugins\PluginName\Plugin.PluginName // the plugin project
            ProjectName\Plugins\PluginName\Plugin.PluginName.Tests
            ProjectName\ProjectName.Mvc3 // The MVC project
            </code>
            
            </para>
            <para>
            The <see cref="T:Griffin.MvcContrib.Plugins.PluginFinder"/> will help you load plugin DLL:s from a plugin folder. Use <see cref="P:Griffin.MvcContrib.Plugins.PluginFinder.Assemblies"/> to
            register all controllers in your favorite IoC container. The use <see cref="T:Griffin.MvcContrib.VirtualPathProvider.GriffinVirtualPathProvider"/> to load your plugin views
            from disk or embedded resources. The <see cref="T:Griffin.MvcContrib.VirtualPathProvider.ExternalViewFixer"/> allows you to keep the views without any code changes (which is 
            required otherwise for views in class libraries).
            </para>
            <para>
            You can use <see cref="T:Griffin.MvcContrib.Plugins.PluginFileLocator"/> to be able to edit the views at runtime in Visual Studio.
            </para>
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Plugins.PluginFileLocator">
            <summary>
            Locator which loads views using the project structure to enable runtime view edits.
            </summary>
            <remarks>
            Works as long as you have used the structure which is described in the namespace documentation.
            </remarks>
            <seealso cref="N:Griffin.MvcContrib.Plugins"/>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.PluginFileLocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Plugins.PluginFileLocator"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.PluginFileLocator.GetFullPath(System.String)">
            <summary>
            Get full path to a file
            </summary>
            <param name="uri">Requested uri</param>
            <returns>
            Full disk path if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.PluginFileLocator.IsFileAllowed(System.String)">
            <summary>
            determins if the found embedded file might be mapped and provided.
            </summary>
            <param name="fullPath">Full path to the file</param>
            <returns><c>true</c> if the file is allowed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Plugins.PluginFileLocator.SetAllowedExtensions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set extensions that are allowed to be scanned.
            </summary>
            <param name="fileExtensions">File extensions without the dot.</param>
        </member>
        <member name="T:Griffin.MvcContrib.Logging.DebugWindowLogger">
            <summary>
            Log to VStudio debug window
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.DebugWindowLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Logging.DebugWindowLogger"/> class.
            </summary>
            <param name="type">The logging type.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.DebugWindowLogger.Debug(System.String)">
            <summary>
            Write a debug message
            </summary>
            <param name="message">Message to write</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.DebugWindowLogger.Debug(System.String,System.Exception)">
            <summary>
            Write a debug message and recursive exception trace (write out all inner exceptions)
            </summary>
            <param name="message">Message to write</param>
            <param name="exception">Exception to log</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.DebugWindowLogger.Warning(System.String)">
            <summary>
            Warning (something unexpected but the framework can continue as expected)
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Logging.DebugWindowLogger.Warning(System.String,System.Exception)">
            <summary>
            Write a warning message and recursive exception trace (write out all inner exceptions)
            </summary>
            <param name="message">Message to write</param>
            <param name="exception">Exception to log</param>
        </member>
        <member name="T:Griffin.MvcContrib.Html.NamespaceDoc">
            <summary>
            Alternative HTML helpers
            </summary>
            <remarks>
            http://blog.gauffin.org/2011/10/first-draft-of-my-alternative-html-helpers/
            (the helpers are work in progress)
            </remarks>
        </member>
        <member name="T:Griffin.MvcContrib.Json.NamespaceDoc">
            <summary>
            Classes making it easier to handle JSON in MVC
            </summary>
            <remarks>
            <para>
            Most of the classes are used to be able return useful results from the controller to the jQuery scripts at client-side. Most
            of the griffin jQuery scripts can take advantage of the classes in this namespace.
            </para>
            <para>
            There are for instance a class which generates JSON from the model state which returns all errors (so that they can be nicely
            handled by the client). Another class uses the <c>ModelValidatorProvider</c> to generate all rules used by the jQuery.validation script.
            </para>
            <para>
            Note that this namespace is dependent on the JSON.Net serializer since the <c>DataContractJsonSerializer</c> can't handle <code>IEnumerable{T}</code>
            and the <c>JavascriptSerializer</c> can't handle custom property names (and I don't want to use camelCase property names). You therefore
            have to use the extension methods in <see cref="T:Griffin.MvcContrib.Json.ControllerExtensions"/> to get proper serialization. Simly type <code>this.JsonResponse(</code> in the
            controller.
            </para>
            </remarks>
            <seealso cref="T:Griffin.MvcContrib.Json.JsonSerializer"/>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.TextBoxGenerator">
            <summary>
            Generates text inputs where the title has been set to the description
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.Generators.TextBoxGenerator.GenerateTags">
            <summary>
            Generates the tags.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Griffin.MvcContrib.Html.Generators.SelectGenerator">
            <summary>
            Used to generate SELECT tags
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Roles.NamespaceDoc">
            <summary>
            Not tested yet, feel free to try it and come back with feedback ;)
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Profile.NamespaceDoc">
            <summary>
            Not tested yet, feel free to try it and come back with feedback ;)
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.CommonPrompts">
            <summary>
            Any prompt found for this type will be used if the requested type do not contain the requested prompt
            </summary>
            <remarks>Common prompts can be used to avoid duplicating a lot of phrases</remarks>
            <seealso cref="T:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider"/>
        </member>
        <member name="T:Griffin.MvcContrib.Caching.NamespaceDoc">
            <summary>
            Classes making it easier to handle Caching in MVC
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount">
            <summary>
            Default implementation
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.ApplicationName">
            <summary>
            Gets or sets application that the user belongs to
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.Email">
            <summary>
            Gets or sets email address
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.PasswordQuestion">
            <summary>
            Gets or sets password question that must be answered to reset password
            </summary>
            <remarks>
            Controlled by the <see cref="P:Griffin.MvcContrib.Providers.Membership.IPasswordPolicy.IsPasswordQuestionRequired"/> property.
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.PasswordAnswer">
            <summary>
            Gets or sets answer for the <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.PasswordQuestion"/>.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.Comment">
            <summary>
            Gets or sets a comment about the user.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.LastLoginAt">
            <summary>
            Gets or sets date/time when the user logged in last.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.IsApproved">
            <summary>
            Gets or sets whether a new user have been approved and may login.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.LastPasswordChangeAt">
            <summary>
            Gets or sets when the password were changed last time.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.IsLockedOut">
            <summary>
            Gets or sets if the account has been locked (the user may not login)
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.IsOnline">
            <summary>
            Gets or sets if the user is online
            </summary>
            <remarks>
            Caluclated with the help of <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.LastActivityAt"/>.
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.LastLockedOutAt">
            <summary>
            Gets or sets when the user was locked out.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.FailedPasswordWindowStartedAt">
            <summary>
            Gets or sets when the user entered an incorrect password for the first time
            </summary>
            <value>
            DateTime.MinValue if the user has not entered an incorrect password (or succeded to login again).
            </value>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.FailedPasswordWindowAttemptCount">
            <summary>
            Gets or sets number of login attempts since <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.FailedPasswordWindowStartedAt"/>.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.FailedPasswordAnswerWindowStartedAt">
            <summary>
            Gets or sets when the user answered the password question incorrect for the first time.
            </summary>
            <value>
            DateTime.MinValue if the user has not entered an incorrect answer (or succeded to login again).
            </value>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.FailedPasswordAnswerWindowAttemptCount">
            <summary>
            Gets or sets number of times that the user have answered the password question incorrectly since <see cref="P:Griffin.MvcContrib.Providers.Membership.IMembershipAccount.FailedPasswordAnswerWindowAttemptCount"/>
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.CreatedAt">
            <summary>
            Gets or sets when the user account was created.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.LastActivityAt">
            <summary>
            Gets or sets date/time when the user did something on the site
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.ProviderUserKey">
            <summary>
            Gets or sets ID identifying the user
            </summary>
            <remarks>
            Should be an id in your system (for instance i your database)
            </remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.UserName">
            <summary>
            Gets or sets username
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.Password">
            <summary>
            Gets or sets password
            </summary>
            <remarks>The state of the password depends on the <seealso cref="T:Griffin.MvcContrib.Providers.Membership.IPasswordStrategy"/> that is used.</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Providers.Membership.SqlRepository.MembershipAccount.PasswordSalt">
            <summary>
            Gets or sets the salt if a hashing strategy is used for the password.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.NamespaceDoc">
            <summary>
            Welcome to Griffin.MvcContrib project. 
            The code can be found at github: https://github.com/jgauffin/griffin.mvccontrib
            Blog articles about the framework can be found at: http://blog.gauffin.org
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.LocalizedModelValidatorProvider">
            <summary>
            Used to localize DataAnnotation attribute error messages and view models
            </summary>
            <remarks>
            <para>Hacks the attributes by assigning custom (localized) messages to them to get localized error messages.</para>
            <para>
            Check for namespace documentation for an example on how to use the provider.
            </para>
            <para>Are you missing validation rules for an attribute? Do not try to use the original validation rules. The standard attributes
            uses some nasty delegates to handle the error message. Screwing with them should be handled with care. 
            </para>
            <para>Create a new <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.IValidationMessageDataSource"/> and register it in <see cref="T:Griffin.MvcContrib.Localization.ValidationMessages.ValidationMessageProviders"/> to customized the translated strings.</para>
            <para>You have to let the results returned from <c>Validate()</c> implement <see cref="T:Griffin.MvcContrib.Localization.IClientValidationRule"/> if you want to enable client validation when using <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>.</para>
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelValidatorProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Gets a list of validators.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="context">The context.</param>
            <param name="attributes">The list of validation attributes.</param>
            <returns>
            A list of validators.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelValidatorProvider.GetMissingTranslationMessage(System.Web.Mvc.ModelMetadata,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            Get default message if the localized string is missing
            </summary>
            <param name="metadata">Model meta data</param>
            <param name="attr">Attribute to translate</param>
            <returns>Formatted message</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelValidatorProvider.FormatErrorMessage(System.Web.Mvc.ModelMetadata,System.ComponentModel.DataAnnotations.ValidationAttribute,System.String)">
            <summary>
            
            </summary>
            <param name="metadata">Model meta data</param>
            <param name="attr">Attribute to localize</param>
            <param name="errorMessage">Localized message with <c>{}</c> formatters.</param>
            <returns>Formatted message (<c>{}</c> has been replaced with values)</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.LocalizedModelValidatorProvider.GetClientRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.ValidationAttribute,System.String)">
            <summary>
            Get client rules
            </summary>
            <param name="metadata">Model meta data</param>
            <param name="context">Controller context</param>
            <param name="attr">Attribute being localized</param>
            <param name="formattedError">Localized error message</param>
            <returns>Collection (may be empty) with error messages for client side</returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Types.TypePrompt">
            <summary>
            Used to store translated prompts.
            </summary>
            <remarks>Will </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePrompt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Types.TypePrompt"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePrompt.#ctor(System.Int32,Griffin.MvcContrib.Localization.Types.TypePrompt)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Localization.Types.TypePrompt"/> class.
            </summary>
            <param name="localeId">New locale </param>
            <param name="source">Copies all but translated text.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePrompt.Equals(Griffin.MvcContrib.Localization.Types.TypePrompt)">
            <summary>
            Indicates whether the current object is equal to another object of the same type. (language not taken into account)
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Types.TypePrompt.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.TypeName">
            <summary>
            Gets or sets type (class) name 
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.TypeFullName">
            <summary>
            Gets or sets namespace + class
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.SubjectTypeName">
            <summary>
            Gets or sets assembly qualified name
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.TextName">
            <summary>
            Gets or sets text name
            </summary>
            <remarks>Might be a property name, an enum value name or just empty (actual type is being translated)</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.TranslatedText">
            <summary>
            Gets actual translation
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.UpdatedAt">
            <summary>
            Gets when the prompt was updated.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.LocaleId">
            <summary>
            Ges or sets LCID identifier.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.Key">
            <summary>
            Gets or sets ID is unique for the current entry (in the current language)
            </summary>
            <remarks>The id should be the same in all languages</remarks>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Types.TypePrompt.UpdatedBy">
            <summary>
            Gets or sets user id (using current identity <see cref="P:System.Web.HttpContext.User"/>).
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository">
            <summary>
            Uses to localize everything for <see cref="T:Griffin.MvcContrib.Localization.Types.ILocalizedStringProvider"/> in files that are placed in the AppData folder.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.GetPrompts(System.Globalization.CultureInfo,System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.SearchFilter)">
            <summary>
            Get all prompts
            </summary>
            <param name="cultureInfo">Culture to get prompts for</param>
            <param name="templateCulture">Culture used as template to be able to include all non-translated prompts</param>
            <param name="filter">Filter to limit the search result </param>
            <returns>
            Collection of translations
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.CreateLanguage(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Create translation for a new language
            </summary>
            <param name="culture">Language to create</param>
            <param name="templateCulture">Language to use as a template</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.GetPrompt(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            Get a specific prompt
            </summary>
            <param name="culture">Culture to get prompt for</param>
            <param name="key">Key which is unique in the current language</param>
            <returns>
            Prompt if found; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.Save(System.Globalization.CultureInfo,System.Type,System.String,System.String)">
            <summary>
            Create  or update a prompt
            </summary>
            <param name="culture">Culture that the prompt is for</param>
            <param name="type">Type being localized</param>
            <param name="name">Property name and any additonal names (such as metadata name, use underscore as delimiter)</param>
            <param name="translatedText">Translated text string</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.Save(System.Globalization.CultureInfo,System.String,System.String,System.String)">
            <summary>
            Create  or update a prompt
            </summary>
            <param name="culture">Culture that the prompt is for</param>
            <param name="fullTypeName">Type.FullName for the type being localized</param>
            <param name="name">Property name and any additonal names (such as metadata name, use underscore as delimiter)</param>
            <param name="translatedText">Translated text string</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.Update(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Types.TypePromptKey,System.String)">
            <summary>
            Uipdates the specified culture.
            </summary>
            <param name="culture">The culture.</param>
            <param name="key">The key.</param>
            <param name="translatedText">The translated text.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.Delete(System.Globalization.CultureInfo,Griffin.MvcContrib.Localization.Types.TypePromptKey)">
            <summary>
            Delete a prompt.
            </summary>
            <param name="culture">Culture to delete prompt in</param>
            <param name="key">Prompt key</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.GetAvailableLanguages">
            <summary>
            Get all languages that got partial or full translations.
            </summary>
            <returns>
            Cultures corresponding to the translations
            </returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.Serialize(System.IO.Stream,System.Collections.Generic.List{Griffin.MvcContrib.Localization.Types.TypePrompt})">
            <summary>
            Serialize items into the specified stream 
            </summary>
            <param name="stream">Stream to serialize to</param>
            <param name="prompts">Prompts to serialize</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize items from a stream
            </summary>
            <param name="stream">Stream containing serialized items</param>
            <returns>Collection of items (or an empty collection)</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.GetLanguage(System.Globalization.CultureInfo)">
            <summary>
            Gets language for the specified culture
            </summary>
            <param name="culture">The culture.</param>
            <returns>Prompts (or an empty collection)</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.GetNotLocalizedPrompts(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Gets the not localized prompts.
            </summary>
            <param name="culture">The culture.</param>
            <param name="defaultCulture">The default culture.</param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.CreateForLanguage(System.Globalization.CultureInfo)">
            <summary>
            Creates for language.
            </summary>
            <param name="culture">The culture.</param>
            <returns>Collection of prompts</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.LoadLanguage(System.Globalization.CultureInfo)">
            <summary>
            Load a language
            </summary>
            <param name="culture">Culture to get.</param>
            <returns>Collection if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.PromptEqualityComparer.Equals(Griffin.MvcContrib.Localization.Types.TypePrompt,Griffin.MvcContrib.Localization.Types.TypePrompt)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type ViewPrompt to compare.</param><param name="y">The second object of type ViewPrompt to compare.</param>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.FlatFile.FileLocalizedTypeRepository.PromptEqualityComparer.GetHashCode(Griffin.MvcContrib.Localization.Types.TypePrompt)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Griffin.MvcContrib.Json.JsonResponse">
            <summary>
            Response being sent back for JSON requests.
            </summary>
            <seealso cref="T:Griffin.MvcContrib.Json.IJsonResponseContent"/>
        </member>
        <member name="M:Griffin.MvcContrib.Json.JsonResponse.#ctor(System.Boolean,Griffin.MvcContrib.Json.IJsonResponseContent)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.Json.JsonResponse"/> class.
            </summary>
            <param name="success"> </param>
            <param name="body">Actual content.</param>
        </member>
        <member name="P:Griffin.MvcContrib.Json.JsonResponse.Success">
            <summary>
            Gets or sets if the request was successful
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Json.JsonResponse.ContentType">
            <summary>
            Gets type of content which is sent back.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Json.JsonResponse.Body">
            <summary>
            Gets content
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.Html.NestedTagBuilder">
            <summary>
            Tag builder which can contain child tag builders
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Html.NestedTagBuilder.ToString(System.Web.Mvc.TagRenderMode)">
            <summary>
            TagBuilder do not have a virtual method so we need to "new" it to be able to add support for child tags.
            </summary>
            <param name="renderMode"></param>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.NestedTagBuilder.ChildrenToString">
            <summary>
            Convert children HTML to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Griffin.MvcContrib.Html.NestedTagBuilder.AddChildren(System.Collections.Generic.IEnumerable{Griffin.MvcContrib.Html.NestedTagBuilder})">
            <summary>
            Add a collection of children to our list.
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Griffin.MvcContrib.Html.NestedTagBuilder.RemoveChildren">
            <summary>
            Remove all children from the list.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.GriffinWebViewPage`1">
            <summary>
            Base page adding support for the new helpers in all views.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.GriffinWebViewPage`1.InitHelpers">
            <summary>
            Inits the helpers.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.GriffinWebViewPage`1.T(System.String,System.Object[])">
            <summary>
            GetText inspired localization
            </summary>
            <param name="text"></param>
            <param name="formatterArguments">optional arguments if the string contains {} formatters</param>
            <returns></returns>
        </member>
        <member name="P:Griffin.MvcContrib.GriffinWebViewPage`1.ViewLocalizer">
            <summary>
            Gets class used for the view localization
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.GriffinWebViewPage`1.Text">
            <summary>
            Gets the text helper.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.GriffinWebViewPage`1.Html2">
            <summary>
            Gets the new HTML helpers.
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.GriffinWebViewPage`1.Select">
            <summary>
            Gets select helper
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.GriffinWebViewPage">
            <summary>
            Required to be able to switch page in the Views\Web.Config, but isn't extended with any new stuff.
            </summary>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.ExternalViewFixer">
            <summary>
              Adds default usings, sets an inherits clause and specifies the layout name
            </summary>
            <remarks>
            Modifies embedded views so that they works like any other views. This includes the following
            
            <list type="bullet">
            <item>Include a <c>@model</c> directive if missing</item>
            <item>Add a <c>@inherits</c> directive</item>
            <item>Add any missing @using statements (MVC and ASP.NET dependencies)</item>
            </list>
            <para>Load the view fixer in <see cref="T:Griffin.MvcContrib.VirtualPathProvider.ViewFileProvider"/> or <see cref="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFileProvider"/></para>
            </remarks>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ExternalViewFixer.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.ExternalViewFixer"/> class.
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.ExternalViewFixer.CorrectView(System.String,System.IO.Stream)">
            <summary>
              Modify the view
            </summary>
            <param name="virtualPath"> Path to view </param>
            <param name="stream"> Stream containing the original view </param>
            <returns> Stream with modified contents </returns>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.ExternalViewFixer.WebViewPageClassName">
            <summary>
              Base view class to inherit.
            </summary>
            <example>
              <code>GriffinVirtualPathProvider.Current.LayoutPath = "Griffin.MvcContrib.GriffinWebViewPage";</code>
            </example>
            <value> Default is Griffin.MvcContrib.GriffinWebViewPage </value>
        </member>
        <member name="P:Griffin.MvcContrib.VirtualPathProvider.ExternalViewFixer.LayoutPath">
            <summary>
              Gets or sets relative path to the layout file to use
            </summary>
            <example>
              <code>GriffinVirtualPathProvider.Current.LayoutPath = "~/Views/Shared/_Layout.cshtml";</code>
            </example>
            <value>Default is the one specified in _ViewStart</value>
        </member>
        <member name="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFileProvider">
            <summary>
              Locates views that are embedded resources.
            </summary>
            <remarks>
            <para>
              Requires that a <see cref="T:Griffin.MvcContrib.VirtualPathProvider.IExternalViewFixer"/> is registered in your container if you want your views to look the same even if they are located in other projects.
            </para>
            <para>Each mapping should be done to the root namespace of each assembly</para>
            <para>AllowedFileExtensions is modified to: "cshtml", "aspx" and "ascx". Feel free to change it according to your needs.</para>
            </remarks>
            <example>
            <code>
            var provider = new EmbeddedViewFileProvider(fixer);
            provider.Add(new NamespaceMapping(typeof (Areas.Griffin.GriffinAreaRegistration).Assembly, "Griffin.MvcContrib"));
            
            GriffinVirtualPathProvider.Current.Add(provider);
            HostingEnvironment.RegisterVirtualPathProvider(GriffinVirtualPathProvider.Current);
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFileProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFileProvider"/> class.
            </summary>
            <param name="siteRoot">Root directory of the web site</param>
            <example>
            <code>
            var embeddedProvider = new EmbeddedViewFileProvider(VirtualPathUtility.ToAbsolute("~/"));
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFileProvider.#ctor(System.String,Griffin.MvcContrib.VirtualPathProvider.IExternalViewFixer)">
            <summary>
            Initializes a new instance of the <see cref="T:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFileProvider"/> class.
            </summary>
            <param name="siteRoot">Root directory of the web site</param>
            <param name="viewFixer">View fixer</param>
            <example>
            <code>
            var embeddedProvider = new EmbeddedViewFileProvider(VirtualPathUtility.ToAbsolute("~/"), new ExternalViewFixer());
            </code>
            </example>
        </member>
        <member name="M:Griffin.MvcContrib.VirtualPathProvider.EmbeddedViewFileProvider.LoadStream(System.String,Griffin.MvcContrib.VirtualPathProvider.EmbeddedFileProvider.MappedResource)">
            <summary>
            Resource to load. Will correct the returned views (so that they work as regular non-embedded views)
            </summary>
            <param name="virtualPath">Requested virtual path</param>
            <param name="resource">Identified resource (i.e. the one to load)</param>
            <returns>
            Stream that can be returned to the Virtual Path Provider.
            </returns>
        </member>
        <member name="T:Griffin.MvcContrib.Localization.Views.QueryConstraints">
            <summary>
            Used to limit the search result
            </summary>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.QueryConstraints.Sort(System.String,Griffin.MvcContrib.Localization.Views.SortDirection)">
            <summary>
            Sort the returned items
            </summary>
            <param name="propertyName">Property to sort by</param>
            <param name="direction">Sort direction</param>
            <returns>current instance</returns>
        </member>
        <member name="M:Griffin.MvcContrib.Localization.Views.QueryConstraints.Page(System.Int32,System.Int32)">
            <summary>
            Page the result
            </summary>
            <param name="pageNumber">Page to get, one based index.</param>
            <param name="pageSize">Items per page</param>
            <returns>this</returns>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.QueryConstraints.PageNumber">
            <summary>
            Gets zero based index for paging
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.QueryConstraints.PageSize">
            <summary>
            Gets page to get
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.QueryConstraints.SortPropertyName">
            <summary>
            Gets property to sort by
            </summary>
        </member>
        <member name="P:Griffin.MvcContrib.Localization.Views.QueryConstraints.SortOrder">
            <summary>
            Gets sort order
            </summary>
        </member>
    </members>
</doc>
